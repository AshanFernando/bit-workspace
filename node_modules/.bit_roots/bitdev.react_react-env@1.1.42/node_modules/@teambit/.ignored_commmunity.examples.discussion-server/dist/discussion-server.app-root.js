"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = exports.createDiscussionServer = void 0;
const subgraph_1 = require("@apollo/subgraph");
const server_1 = require("@apollo/server");
const standalone_1 = require("@apollo/server/standalone");
const discussion_server_graphql_js_1 = require("./discussion-server.graphql.js");
const discussion_server_js_1 = require("./discussion-server.js");
function createDiscussionServer() {
    return __awaiter(this, void 0, void 0, function* () {
        // ports are injects by Bit to `process.env.PORT`
        const port = parseInt(process.env.PORT, 10) || 3000;
        const discussionServer = discussion_server_js_1.DiscussionServer.from();
        const { typeDefs, resolvers } = (0, discussion_server_graphql_js_1.discussionServerSchema)(discussionServer);
        // The ApolloServer constructor requires two parameters: your schema
        // definition and your set of resolvers.
        const server = new server_1.ApolloServer({
            schema: (0, subgraph_1.buildSubgraphSchema)({ typeDefs, resolvers }),
        });
        // Passing an ApolloServer instance to the `startStandaloneServer` function:
        //  1. creates an Express app
        //  2. installs your ApolloServer instance as middleware
        //  3. prepares your app to handle incoming requests
        const { url } = yield (0, standalone_1.startStandaloneServer)(server, {
            listen: {
                port,
            },
        });
        console.log(`ðŸš€  Server ready at: ${url}`);
    });
}
exports.createDiscussionServer = createDiscussionServer;
function run() {
    return __awaiter(this, void 0, void 0, function* () {
        return createDiscussionServer();
    });
}
exports.run = run;
//# sourceMappingURL=discussion-server.app-root.js.map