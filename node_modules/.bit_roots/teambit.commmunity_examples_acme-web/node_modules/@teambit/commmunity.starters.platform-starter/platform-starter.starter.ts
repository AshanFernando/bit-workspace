import { WorkspaceContext, WorkspaceTemplate } from '@teambit/generator';
  import { generateFiles as generateCommonFiles } from './template/files/generate-files';

  export type PlatformStarterStarterOptions = Pick<WorkspaceTemplate, 'name' | 'description' | 'hidden'>;

  export class PlatformStarterWorkspaceStarter implements WorkspaceTemplate {
    constructor(
      readonly name = 'platform-starter-workspace',
      readonly description = 'PlatformStarter workspace with kubernetes deployer',
      readonly hidden = false
    ) {}

    async generateFiles(context: WorkspaceContext) {
      return generateCommonFiles(context);
    }

    fork() {
      return [
        {
          id: 'teambit.react/react-env-extension',
          targetName: 'envs/my-react-env',
        },
        {
          id: 'backend.kubernetes/examples/acme-web',
          targetName: 'examples/acme-web'
        },
        {
          id: 'backend.kubernetes/examples/discussion-server',
          targetName: 'examples/discussion-server'
        },
        {
          id: 'backend.kubernetes/examples/gateway-server',
          targetName: 'examples/gateway-server'
        },
        {
          id: 'backend.kubernetes/examples/platform',
          targetName: 'examples/platform'
        },
        {
          id: 'backend.kubernetes/examples/user-server',
          targetName: 'examples/user-server'
        }
      ];
    }

    static from(options: Partial<PlatformStarterStarterOptions>) {
      return () =>
        new PlatformStarterWorkspaceStarter(
          options.name,
          options.description,
          options.hidden
        );
    }
  }

