import type { AppDeployContext } from "@teambit/application";
import Docker from "dockerode";
import type { DockerFileTemplate } from "./template.js";
export type DockerDeployerOptions = {
    /**
     * if true, the image will be tagged as latest
     */
    latest?: boolean;
    /**
     * the organization to use for the image tag (e.g. my-org/my-app)
     */
    org?: string;
    /**
     * override tag of the image
     */
    tag?: string;
    /**
     * the version to append to the tag
     */
    version?: string;
    buildOptions?: Docker.ImageBuildOptions;
    pushOptions?: Docker.ImagePushOptions;
    /**
     * if true, node_modules will be copied to the public dir
     * @default false
     */
    copyNodeModules?: boolean;
    /**
     * The template to use for the Dockerfile
     * Can be a custom template or a Dockerfile relative path.
     * @example
     * ```ts
     * dockerfileTemplate: new NodeDockerFile()
     * ```
     */
    dockerfileTemplate: DockerFileTemplate | string;
    /**
     * Entry file for the app, used in the Dockerfile
     * @example
     * ```ts
     * entryFile: "node-app.cjs"
     * ```
     */
    entryFile: string;
};
export type DeployContext = {
    publicDir?: string;
    metadata?: Record<string, unknown>;
} & AppDeployContext;
export declare class DockerDeploy {
    readonly options: DockerDeployerOptions;
    constructor(options: DockerDeployerOptions);
    static deploy(options: DockerDeployerOptions): (deployContext: DeployContext) => Promise<void>;
    deploy(context: DeployContext): Promise<void>;
    private getTag;
    /**
     * Recursively copy a directory but change the symlinks to be relative to the new destination
     * @param src
     * @param dest
     */
    private copyDirectory;
    private get docker();
}
