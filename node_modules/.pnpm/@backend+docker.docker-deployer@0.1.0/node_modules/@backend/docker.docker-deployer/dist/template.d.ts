export interface DockerFileTemplate {
    name: string;
    copyNodeModules: boolean;
    generate(opts: GenerateOpts): Promise<string> | string;
}
type GenerateOpts = {
    capsulePath: string;
    publicDir: string;
    appName: string;
    entryFile: string;
};
export declare class NodeDockerFile implements DockerFileTemplate {
    name: string;
    copyNodeModules: boolean;
    generate(opts: GenerateOpts): Promise<string>;
    /**
     * This function gets the function that initializes the entry file.
     * If the entry file exposes a default function, it will be used.
     * If it exposes a named function, it will be used.
     * If it does not expose anything, we will just require the file.
     * The function will use ESM as it supports both ESM and CJS.
     *
     * @param entryFile The path to the entry file.
     * @returns A promise that resolves to either "default", a named function descriptor, or "require".
     */
    private getEntryFileFn;
    private getFormattedCommand;
    private getEntryFile;
}
export declare class HtmlDockerFile implements DockerFileTemplate {
    name: string;
    copyNodeModules: boolean;
    generate(opts: GenerateOpts): string;
}
export {};
