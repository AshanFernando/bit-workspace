!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["backend.kubernetes/adapters/gke-preview"]=t():e["backend.kubernetes/adapters/gke-preview"]=t()}(self,(()=>(()=>{"use strict";var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{compositions:()=>i,compositions_metadata:()=>c,overview:()=>u});var r={};e.r(r),e.d(r,{default:()=>d}),React;const n=MdxJsReact,o=TeambitMdxUiMdxScopeContext;var p=["components"];function a(){return a=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}var l={},s="wrapper";function d(e){var t=e.components,r=function(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}(e,p);return(0,n.mdx)(s,a({},l,r,{components:t,mdxType:"MDXLayout"}),(0,n.mdx)(o.MDXScopeProvider,{components:{},mdxType:"MDXScopeProvider"},(0,n.mdx)("p",null,"This is a ",(0,n.mdx)("a",{parentName:"p",href:"https://cloud.google.com/kubernetes-engine"},"Google Kubernetes Engine")," adapter for the ",(0,n.mdx)("a",{parentName:"p",href:"https://bit/cloudbackend/kubernetes/kubernetes-deployer"},"Kubernetes Deployer"),". To use it, set your Kubernetes deployer like so:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-ts"},"/** @filename: my-platform.bit-app.ts */\n\nimport { Platform } from '@bitdev/platforms.platform';\nimport { KubernetesDeployer } from '@backend/kubernetes.kubernetes-deployer';\n// import the K8S Google Cloud Adapater\nimport { GKEAdapter } from '@backend/kubernetes.adapters.gke';\n\nexport const AcmePlatform = Platform.from({\n  // ...\n  deploy: KubernetesDeployer.deploy({\n    /* use glob pattern to include the YAML files for the K8S apply */\n    files: ['./kubernetes/*.yaml'],\n    adapter: new GKEAdapter({\n      clusterName: 'acme-platform',\n      zone: 'us-central1',\n      /**\n       * create a service account with the proper permissions to genrate\n       *  a K8S cluster. The env var should hold the JSON key content\n       *  or the absolute path to the JSON file\n       */\n      keyJson: process.env.K8S_GOOGLE_CLOUD,\n    }),\n  }),\n});\n\nexport default AcmePlatform;\n")),(0,n.mdx)("blockquote",null,(0,n.mdx)("p",{parentName:"blockquote"},"When building and deploying using Ripple CI, make sure to set the ",(0,n.mdx)("inlineCode",{parentName:"p"},"keyJson")," value as ",(0,n.mdx)("a",{parentName:"p",href:"https://bit.dev/reference/ci/ripple-ci#ripple-ci-secrets"},"a secret"))),(0,n.mdx)("p",null,"See the ","[Kubernetes Deployer documentation]","(Kubernetes Deployer](",(0,n.mdx)("a",{parentName:"p",href:"https://bit.cloud/backend/kubernetes/kubernetes-deployer"},"https://bit.cloud/backend/kubernetes/kubernetes-deployer"),") to learn how to deploy your platform.")))}d.isMDXComponent=!0;const i=[],u=[r],c={compositions:[]};return t})()));