import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'node:fs';
import { tmpdir } from 'node:os';
import { dirname, join } from 'node:path';
import { randomUUID } from 'node:crypto';
import { rm } from 'node:fs/promises';
import { GoogleAuth } from 'google-auth-library';
import gke from '@google-cloud/container';
const client = new gke.v1.ClusterManagerClient();
export class GKEAdapter {
    constructor(gcloud) {
        this.gcloud = gcloud;
    }
    async getCredentials() {
        if (!this.gcloud.keyJson)
            throw new Error('[gcloud] keyJson is required');
        let keyJsonContent = this.gcloud.keyJson;
        if (this.isPath(keyJsonContent)) {
            keyJsonContent = readFileSync(keyJsonContent, 'utf8');
        }
        const keyPath = join(tmpdir(), randomUUID(), 'key.json');
        this.keyPath = keyPath;
        mkdirSync(dirname(keyPath), { recursive: true });
        const key = this.parse(keyJsonContent);
        if (key.private_key)
            key.private_key = this.formatKey(key.private_key);
        this.gcloud.keyJson = JSON.stringify(key);
        writeFileSync(keyPath, this.gcloud.keyJson);
        const parsedKey = JSON.parse(this.gcloud.keyJson);
        this.projectId = parsedKey.project_id;
        console.log(`[gcloud] Authenticating using service account (${this.projectId})...`);
        await this.authGcloud();
        const [response] = await client.getCluster({
            projectId: this.projectId,
            name: `projects/${this.projectId}/locations/${this.gcloud.zone}/clusters/${this.gcloud.clusterName}`,
        });
        await rm(keyPath);
        return {
            endpoint: `https://${response.endpoint}`,
            certificate: response.masterAuth?.clusterCaCertificate,
            token: this.accessToken,
        };
    }
    formatKey(key) {
        return key.replace(/\\n/g, '\n');
    }
    async authGcloud() {
        console.log(`[gcloud] Authenticating using path: ${this.keyPath}`);
        // Modify the default credentials from the environment
        process.env.GOOGLE_APPLICATION_CREDENTIALS = this.keyPath;
        const auth = new GoogleAuth({
            scopes: ['https://www.googleapis.com/auth/cloud-platform'],
        });
        const authClient = await auth.getClient();
        const token = await authClient.getAccessToken();
        this.accessToken = token.token;
    }
    isPath(str) {
        return existsSync(str);
    }
    parse(str) {
        try {
            return JSON.parse(str);
        }
        catch (e) {
            throw new Error(`[gcloud] Invalid JSON: ${str}`);
        }
    }
}
//# sourceMappingURL=gke.js.map