{
  "__schema": "APISchema",
  "location": {
    "filePath": "index.ts",
    "line": 1,
    "character": 1
  },
  "module": {
    "__schema": "ModuleSchema",
    "location": {
      "filePath": "index.ts",
      "line": 1,
      "character": 1
    },
    "exports": [
      {
        "__schema": "ExportSchema",
        "location": {
          "filePath": "index.ts",
          "line": 1,
          "character": 10
        },
        "name": "DiscussionServer",
        "exportNode": {
          "__schema": "ClassSchema",
          "location": {
            "filePath": "discussion-server.ts",
            "line": 6,
            "character": 1
          },
          "doc": {
            "__schema": "DocSchema",
            "location": {
              "filePath": "discussion-server.ts",
              "line": 3,
              "character": 1
            },
            "raw": "/**\n * discussions server\n */",
            "comment": "discussions server"
          },
          "signature": "class DiscussionServer",
          "name": "DiscussionServer",
          "members": [
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "discussion-server.ts",
                "line": 10,
                "character": 5
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 7,
                  "character": 5
                },
                "raw": "/**\n     * say hello.\n     */",
                "comment": "say hello."
              },
              "signature": "(method) DiscussionServer.listDiscussions(): Promise<Discussion[]>",
              "name": "listDiscussions",
              "params": [],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 10,
                  "character": 30
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeArraySchema",
                    "location": {
                      "filePath": "discussion-server.ts",
                      "line": 10,
                      "character": 38
                    },
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "discussion-server.ts",
                        "line": 10,
                        "character": 38
                      },
                      "name": "Discussion",
                      "componentId": {
                        "scope": "acme.discussions",
                        "name": "entities/discussion",
                        "version": "1.0.2"
                      }
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "discussion-server.ts",
                "line": 20,
                "character": 5
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 17,
                  "character": 5
                },
                "raw": "/**\n     * create a new instance of a discussions server.\n     */",
                "comment": "create a new instance of a discussions server."
              },
              "signature": "(method) DiscussionServer.from(): DiscussionServer",
              "name": "from",
              "params": [],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 20,
                  "character": 5
                },
                "name": "DiscussionServer"
              },
              "modifiers": [
                "static"
              ]
            }
          ],
          "extendsNodes": [],
          "implementNodes": []
        }
      }
    ],
    "internals": []
  },
  "internals": [
    {
      "__schema": "ModuleSchema",
      "location": {
        "filePath": "discussion-server.ts",
        "line": 1,
        "character": 1
      },
      "exports": [
        {
          "__schema": "ClassSchema",
          "location": {
            "filePath": "discussion-server.ts",
            "line": 6,
            "character": 1
          },
          "doc": {
            "__schema": "DocSchema",
            "location": {
              "filePath": "discussion-server.ts",
              "line": 3,
              "character": 1
            },
            "raw": "/**\n * discussions server\n */",
            "comment": "discussions server"
          },
          "signature": "class DiscussionServer",
          "name": "DiscussionServer",
          "members": [
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "discussion-server.ts",
                "line": 10,
                "character": 5
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 7,
                  "character": 5
                },
                "raw": "/**\n     * say hello.\n     */",
                "comment": "say hello."
              },
              "signature": "(method) DiscussionServer.listDiscussions(): Promise<Discussion[]>",
              "name": "listDiscussions",
              "params": [],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 10,
                  "character": 30
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeArraySchema",
                    "location": {
                      "filePath": "discussion-server.ts",
                      "line": 10,
                      "character": 38
                    },
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "discussion-server.ts",
                        "line": 10,
                        "character": 38
                      },
                      "name": "Discussion",
                      "componentId": {
                        "scope": "acme.discussions",
                        "name": "entities/discussion",
                        "version": "1.0.2"
                      }
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "discussion-server.ts",
                "line": 20,
                "character": 5
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 17,
                  "character": 5
                },
                "raw": "/**\n     * create a new instance of a discussions server.\n     */",
                "comment": "create a new instance of a discussions server."
              },
              "signature": "(method) DiscussionServer.from(): DiscussionServer",
              "name": "from",
              "params": [],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "discussion-server.ts",
                  "line": 20,
                  "character": 5
                },
                "name": "DiscussionServer"
              },
              "modifiers": [
                "static"
              ]
            }
          ],
          "extendsNodes": [],
          "implementNodes": []
        }
      ],
      "internals": []
    }
  ],
  "componentId": {
    "scope": "backend.kubernetes",
    "name": "examples/discussion-server",
    "version": "8c11b06622d75d225a756625f358c5af93e4e28a"
  },
  "taggedModuleExports": []
}