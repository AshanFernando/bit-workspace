!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports["backend.kubernetes/examples/gateway-server-preview"]=r():e["backend.kubernetes/examples/gateway-server-preview"]=r()}(self,(()=>(()=>{"use strict";var e={d:(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{compositions:()=>l,compositions_metadata:()=>d,overview:()=>c});var t={};e.r(t),e.d(t,{default:()=>m}),React;const n=MdxJsReact,o=TeambitMdxUiMdxScopeContext;var s=["components"];function a(){return a=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},a.apply(this,arguments)}var p={},i="wrapper";function m(e){var r=e.components,t=function(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,s);return(0,n.mdx)(i,a({},p,t,{components:r,mdxType:"MDXLayout"}),(0,n.mdx)(o.MDXScopeProvider,{components:{},mdxType:"MDXScopeProvider"},(0,n.mdx)("p",null,"A general purpose GraphQL and REST API gateway for the composition of micro services in a ",(0,n.mdx)("a",{parentName:"p",href:"https://bit.dev/docs/composable-platforms/#service-oriented-platforms"},"Platforms")," setup."),(0,n.mdx)("p",null,"For example, ",(0,n.mdx)("a",{parentName:"p",href:"https://bit.cloud/backend/kubernetes/examples/platform"},"the following Platform")," uses this Gateway server to compose the Discussion server and the User server. The compositions happens both locally (in development) and when applied to a K8S cluster."),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-ts"},"/** @filename: my-platform.bit-app.ts */\n\n// ...\n\nimport { Platform } from '@bitdev/platforms.platform';\n\nconst UserServer = import.meta.resolve(\n  '@backend/kubernetes.examples.user-server'\n);\nconst DiscussionServer = import.meta.resolve(\n  '@backend/kubernetes.examples.discussion-server'\n);\nconst PlatformGateway = import.meta.resolve(\n  '@backend/kubernetes.examples.gateway-server'\n);\n\nexport const AcmePlatform = Platform.from({\n  // ...\n  backends: {\n    main: PlatformGateway,\n    services: [\n      [\n        UserServer,\n        { name: 'user-server', remoteUrl: 'http://user-server-service' },\n      ],\n      [\n        DiscussionServer,\n        {\n          name: 'discussion-server',\n          remoteUrl: 'http://discussion-server-service',\n        },\n      ],\n    ],\n  },\n // ...\n  }),\n});\n\nexport default AcmePlatform;\n"))))}m.isMDXComponent=!0;const l=[],c=[t],d={compositions:[]};return r})()));