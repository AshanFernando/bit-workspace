{
  "__schema": "APISchema",
  "location": {
    "filePath": "index.ts",
    "line": 1,
    "character": 1
  },
  "module": {
    "__schema": "ModuleSchema",
    "location": {
      "filePath": "index.ts",
      "line": 1,
      "character": 1
    },
    "exports": [
      {
        "__schema": "ExportSchema",
        "location": {
          "filePath": "index.ts",
          "line": 1,
          "character": 15
        },
        "name": "GatewayContext",
        "exportNode": {
          "__schema": "TypeSchema",
          "location": {
            "filePath": "gateway-server.ts",
            "line": 21,
            "character": 1
          },
          "signature": "type GatewayContext = {\n    port?: number;\n    services: ApplicationInstance[];\n    cors?: CorsOptions;\n}",
          "name": "GatewayContext",
          "type": {
            "__schema": "TypeLiteralSchema",
            "location": {
              "filePath": "gateway-server.ts",
              "line": 21,
              "character": 30
            },
            "members": [
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 25,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 22,
                    "character": 3
                  },
                  "raw": "/**\n   * port\n   */",
                  "comment": "port"
                },
                "signature": "(property) port?: number",
                "name": "port",
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 25,
                    "character": 10
                  },
                  "name": "number"
                },
                "isOptional": true
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 30,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 27,
                    "character": 3
                  },
                  "raw": "/**\n   * services for run.\n   */",
                  "comment": "services for run."
                },
                "signature": "(property) services: ApplicationInstance[]",
                "name": "services",
                "type": {
                  "__schema": "TypeArraySchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 30,
                    "character": 13
                  },
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 30,
                      "character": 13
                    },
                    "name": "ApplicationInstance",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  }
                },
                "isOptional": false
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 35,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 32,
                    "character": 3
                  },
                  "raw": "/**\n   * cors configuration.\n   */",
                  "comment": "cors configuration."
                },
                "signature": "(property) cors?: CorsOptions",
                "name": "cors",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 35,
                    "character": 3
                  },
                  "name": "CorsOptions",
                  "internalFilePath": "gateway-server.ts"
                },
                "isOptional": true
              }
            ]
          }
        }
      },
      {
        "__schema": "ExportSchema",
        "location": {
          "filePath": "index.ts",
          "line": 1,
          "character": 31
        },
        "name": "GatewayServer",
        "exportNode": {
          "__schema": "InterfaceSchema",
          "location": {
            "filePath": "gateway-server.ts",
            "line": 4,
            "character": 1
          },
          "signature": "interface GatewayServer",
          "name": "GatewayServer",
          "members": [
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "gateway-server.ts",
                "line": 8,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 5,
                  "character": 3
                },
                "raw": "/**\n   * name of the context.\n   */",
                "comment": "name of the context."
              },
              "signature": "(property) GatewayServer.name?: string",
              "name": "name",
              "type": {
                "__schema": "KeywordTypeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 8,
                  "character": 10
                },
                "name": "string"
              },
              "isOptional": true
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "gateway-server.ts",
                "line": 13,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 10,
                  "character": 3
                },
                "raw": "/**\n   * runs the gateway.\n   */",
                "comment": "runs the gateway."
              },
              "signature": "(property) GatewayServer.run: (context: GatewayContext) => Promise<ApplicationInstance>",
              "name": "run",
              "type": {
                "__schema": "FunctionLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 13,
                  "character": 8
                },
                "signature": "(context: GatewayContext): Promise<\u001b[2m(component: teambit.harmony/application)\u001b[22m ApplicationInstance>",
                "name": "",
                "params": [
                  {
                    "__schema": "ParameterSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 13,
                      "character": 9
                    },
                    "name": "context",
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 13,
                        "character": 18
                      },
                      "name": "GatewayContext"
                    },
                    "isOptional": false,
                    "isSpread": false
                  }
                ],
                "returnType": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 13,
                    "character": 37
                  },
                  "name": "Promise",
                  "typeArgs": [
                    {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 13,
                        "character": 45
                      },
                      "name": "ApplicationInstance",
                      "componentId": {
                        "scope": "teambit.harmony",
                        "name": "application"
                      }
                    }
                  ]
                },
                "modifiers": []
              },
              "isOptional": false
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "gateway-server.ts",
                "line": 18,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 15,
                  "character": 3
                },
                "raw": "/**\n   * deploy options.\n   */",
                "comment": "deploy options."
              },
              "signature": "(property) GatewayServer.deployOptions?: DeployOptions",
              "name": "deployOptions",
              "type": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 18,
                  "character": 3
                },
                "name": "DeployOptions",
                "componentId": {
                  "scope": "bitdev.symphony",
                  "name": "backends/backend-server",
                  "version": "0.0.8"
                }
              },
              "isOptional": true
            }
          ],
          "extendsNodes": []
        }
      },
      {
        "__schema": "ExportSchema",
        "location": {
          "filePath": "index.ts",
          "line": 2,
          "character": 10
        },
        "name": "DefaultGateway",
        "exportNode": {
          "__schema": "ClassSchema",
          "location": {
            "filePath": "default-gateway.ts",
            "line": 27,
            "character": 1
          },
          "signature": "class DefaultGateway",
          "name": "DefaultGateway",
          "members": [
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 28,
                "character": 2
              },
              "signature": "(property) DefaultGateway.name: string",
              "name": "name",
              "type": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 28,
                  "character": 2
                },
                "type": "string"
              },
              "isOptional": true,
              "defaultValue": "\"gateway-server\""
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 33,
                "character": 2
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 30,
                  "character": 2
                },
                "raw": "/**\n\t * run the symphony gateway.\n\t */",
                "comment": "run the symphony gateway."
              },
              "signature": "(method) DefaultGateway.run(context: GatewayContext): Promise<ApplicationInstance>",
              "name": "run",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 33,
                    "character": 12
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 33,
                      "character": 21
                    },
                    "name": "GatewayContext"
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 33,
                  "character": 38
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 33,
                      "character": 46
                    },
                    "name": "ApplicationInstance",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 49,
                "character": 2
              },
              "signature": "(method) DefaultGateway.build(context: AppBuildContext): Promise<AppBuildResult>",
              "name": "build",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 49,
                    "character": 14
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 49,
                      "character": 23
                    },
                    "name": "AppBuildContext",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 49,
                  "character": 41
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 49,
                      "character": 49
                    },
                    "name": "AppBuildResult",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 99,
                "character": 2
              },
              "signature": "(method) DefaultGateway.deploy(context: AppDeployContext): Promise<void>",
              "name": "deploy",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 99,
                    "character": 9
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 99,
                      "character": 18
                    },
                    "name": "AppDeployContext",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 99,
                  "character": 2
                },
                "type": "Promise<void>"
              },
              "modifiers": []
            }
          ],
          "extendsNodes": [],
          "implementNodes": [
            {
              "__schema": "ExpressionWithTypeArgumentsSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 27,
                "character": 40
              },
              "name": "implements GatewayServer",
              "typeArgs": [],
              "expression": {
                "__schema": "InterfaceSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 4,
                  "character": 1
                },
                "name": "GatewayServer",
                "signature": "interface GatewayServer",
                "extendsNodes": [],
                "members": [
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 8,
                      "character": 3
                    },
                    "name": "name",
                    "signature": "(property) GatewayServer.name?: string",
                    "isOptional": true,
                    "type": {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 8,
                        "character": 10
                      },
                      "name": "string"
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 5,
                        "character": 3
                      },
                      "raw": "/**\n   * name of the context.\n   */",
                      "comment": "name of the context."
                    }
                  },
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 13,
                      "character": 3
                    },
                    "name": "run",
                    "signature": "(property) GatewayServer.run: (context: GatewayContext) => Promise<ApplicationInstance>",
                    "isOptional": false,
                    "type": {
                      "__schema": "FunctionLikeSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 13,
                        "character": 8
                      },
                      "name": "",
                      "modifiers": [],
                      "params": [
                        {
                          "__schema": "ParameterSchema",
                          "location": {
                            "filePath": "gateway-server.ts",
                            "line": 13,
                            "character": 9
                          },
                          "name": "context",
                          "isOptional": false,
                          "isSpread": false,
                          "type": {
                            "__schema": "TypeRefSchema",
                            "location": {
                              "filePath": "gateway-server.ts",
                              "line": 13,
                              "character": 18
                            },
                            "name": "GatewayContext"
                          }
                        }
                      ],
                      "returnType": {
                        "__schema": "TypeRefSchema",
                        "location": {
                          "filePath": "gateway-server.ts",
                          "line": 13,
                          "character": 37
                        },
                        "name": "Promise",
                        "typeArgs": [
                          {
                            "__schema": "TypeRefSchema",
                            "location": {
                              "filePath": "gateway-server.ts",
                              "line": 13,
                              "character": 45
                            },
                            "name": "ApplicationInstance",
                            "componentId": {
                              "_legacy": {
                                "scope": "teambit.harmony",
                                "name": "application",
                                "version": "latest"
                              }
                            }
                          }
                        ]
                      },
                      "signature": "(context: GatewayContext): Promise<\u001b[2m(component: teambit.harmony/application)\u001b[22m ApplicationInstance>"
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 10,
                        "character": 3
                      },
                      "raw": "/**\n   * runs the gateway.\n   */",
                      "comment": "runs the gateway."
                    }
                  },
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 18,
                      "character": 3
                    },
                    "name": "deployOptions",
                    "signature": "(property) GatewayServer.deployOptions?: DeployOptions",
                    "isOptional": true,
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 18,
                        "character": 3
                      },
                      "name": "DeployOptions",
                      "componentId": {
                        "_legacy": {
                          "scope": "bitdev.symphony",
                          "name": "backends/backend-server",
                          "version": "0.0.8"
                        }
                      }
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 15,
                        "character": 3
                      },
                      "raw": "/**\n   * deploy options.\n   */",
                      "comment": "deploy options."
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    ],
    "internals": []
  },
  "internals": [
    {
      "__schema": "ModuleSchema",
      "location": {
        "filePath": "gateway-server.ts",
        "line": 1,
        "character": 1
      },
      "exports": [
        {
          "__schema": "InterfaceSchema",
          "location": {
            "filePath": "gateway-server.ts",
            "line": 4,
            "character": 1
          },
          "signature": "interface GatewayServer",
          "name": "GatewayServer",
          "members": [
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "gateway-server.ts",
                "line": 8,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 5,
                  "character": 3
                },
                "raw": "/**\n   * name of the context.\n   */",
                "comment": "name of the context."
              },
              "signature": "(property) GatewayServer.name?: string",
              "name": "name",
              "type": {
                "__schema": "KeywordTypeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 8,
                  "character": 10
                },
                "name": "string"
              },
              "isOptional": true
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "gateway-server.ts",
                "line": 13,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 10,
                  "character": 3
                },
                "raw": "/**\n   * runs the gateway.\n   */",
                "comment": "runs the gateway."
              },
              "signature": "(property) GatewayServer.run: (context: GatewayContext) => Promise<ApplicationInstance>",
              "name": "run",
              "type": {
                "__schema": "FunctionLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 13,
                  "character": 8
                },
                "signature": "(context: GatewayContext): Promise<\u001b[2m(component: teambit.harmony/application)\u001b[22m ApplicationInstance>",
                "name": "",
                "params": [
                  {
                    "__schema": "ParameterSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 13,
                      "character": 9
                    },
                    "name": "context",
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 13,
                        "character": 18
                      },
                      "name": "GatewayContext"
                    },
                    "isOptional": false,
                    "isSpread": false
                  }
                ],
                "returnType": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 13,
                    "character": 37
                  },
                  "name": "Promise",
                  "typeArgs": [
                    {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 13,
                        "character": 45
                      },
                      "name": "ApplicationInstance",
                      "componentId": {
                        "scope": "teambit.harmony",
                        "name": "application"
                      }
                    }
                  ]
                },
                "modifiers": []
              },
              "isOptional": false
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "gateway-server.ts",
                "line": 18,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 15,
                  "character": 3
                },
                "raw": "/**\n   * deploy options.\n   */",
                "comment": "deploy options."
              },
              "signature": "(property) GatewayServer.deployOptions?: DeployOptions",
              "name": "deployOptions",
              "type": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 18,
                  "character": 3
                },
                "name": "DeployOptions",
                "componentId": {
                  "scope": "bitdev.symphony",
                  "name": "backends/backend-server",
                  "version": "0.0.8"
                }
              },
              "isOptional": true
            }
          ],
          "extendsNodes": []
        },
        {
          "__schema": "TypeSchema",
          "location": {
            "filePath": "gateway-server.ts",
            "line": 21,
            "character": 1
          },
          "signature": "type GatewayContext = {\n    port?: number;\n    services: ApplicationInstance[];\n    cors?: CorsOptions;\n}",
          "name": "GatewayContext",
          "type": {
            "__schema": "TypeLiteralSchema",
            "location": {
              "filePath": "gateway-server.ts",
              "line": 21,
              "character": 30
            },
            "members": [
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 25,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 22,
                    "character": 3
                  },
                  "raw": "/**\n   * port\n   */",
                  "comment": "port"
                },
                "signature": "(property) port?: number",
                "name": "port",
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 25,
                    "character": 10
                  },
                  "name": "number"
                },
                "isOptional": true
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 30,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 27,
                    "character": 3
                  },
                  "raw": "/**\n   * services for run.\n   */",
                  "comment": "services for run."
                },
                "signature": "(property) services: ApplicationInstance[]",
                "name": "services",
                "type": {
                  "__schema": "TypeArraySchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 30,
                    "character": 13
                  },
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 30,
                      "character": 13
                    },
                    "name": "ApplicationInstance",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  }
                },
                "isOptional": false
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 35,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 32,
                    "character": 3
                  },
                  "raw": "/**\n   * cors configuration.\n   */",
                  "comment": "cors configuration."
                },
                "signature": "(property) cors?: CorsOptions",
                "name": "cors",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 35,
                    "character": 3
                  },
                  "name": "CorsOptions",
                  "internalFilePath": "gateway-server.ts"
                },
                "isOptional": true
              }
            ]
          }
        },
        {
          "__schema": "TypeSchema",
          "location": {
            "filePath": "gateway-server.ts",
            "line": 38,
            "character": 1
          },
          "signature": "type CorsOptions = {\n    domains?: string[];\n    credentials?: boolean;\n}",
          "name": "CorsOptions",
          "type": {
            "__schema": "TypeLiteralSchema",
            "location": {
              "filePath": "gateway-server.ts",
              "line": 38,
              "character": 27
            },
            "members": [
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 42,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 39,
                    "character": 3
                  },
                  "raw": "/**\n   * list of domains to allow.\n   */",
                  "comment": "list of domains to allow."
                },
                "signature": "(property) domains?: string[]",
                "name": "domains",
                "type": {
                  "__schema": "TypeArraySchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 42,
                    "character": 13
                  },
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 42,
                      "character": 13
                    },
                    "name": "string"
                  }
                },
                "isOptional": true
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 47,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 44,
                    "character": 3
                  },
                  "raw": "/**\n   * configure the credentials.\n   */",
                  "comment": "configure the credentials."
                },
                "signature": "(property) credentials?: boolean",
                "name": "credentials",
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "gateway-server.ts",
                    "line": 47,
                    "character": 17
                  },
                  "name": "boolean"
                },
                "isOptional": true
              }
            ]
          }
        }
      ],
      "internals": []
    },
    {
      "__schema": "ModuleSchema",
      "location": {
        "filePath": "default-gateway.ts",
        "line": 1,
        "character": 1
      },
      "exports": [
        {
          "__schema": "TypeSchema",
          "location": {
            "filePath": "default-gateway.ts",
            "line": 15,
            "character": 1
          },
          "signature": "type StartGatewayOptions = {\n    port?: number;\n    platformHeaders?: Record<string, string>;\n}",
          "name": "StartGatewayOptions",
          "type": {
            "__schema": "TypeLiteralSchema",
            "location": {
              "filePath": "default-gateway.ts",
              "line": 15,
              "character": 35
            },
            "members": [
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 19,
                  "character": 2
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 16,
                    "character": 2
                  },
                  "raw": "/**\n\t * port the range.\n\t */",
                  "comment": "port the range."
                },
                "signature": "(property) port?: number",
                "name": "port",
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 19,
                    "character": 9
                  },
                  "name": "number"
                },
                "isOptional": true
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 24,
                  "character": 2
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 21,
                    "character": 2
                  },
                  "raw": "/**\n\t * X-Auth\n\t */",
                  "comment": "X-Auth"
                },
                "signature": "(property) platformHeaders?: Record<string, string>",
                "name": "platformHeaders",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 24,
                    "character": 20
                  },
                  "name": "Record",
                  "typeArgs": [
                    {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "default-gateway.ts",
                        "line": 24,
                        "character": 27
                      },
                      "name": "string"
                    },
                    {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "default-gateway.ts",
                        "line": 24,
                        "character": 35
                      },
                      "name": "string"
                    }
                  ]
                },
                "isOptional": true
              }
            ]
          }
        },
        {
          "__schema": "ClassSchema",
          "location": {
            "filePath": "default-gateway.ts",
            "line": 27,
            "character": 1
          },
          "signature": "class DefaultGateway",
          "name": "DefaultGateway",
          "members": [
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 28,
                "character": 2
              },
              "signature": "(property) DefaultGateway.name: string",
              "name": "name",
              "type": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 28,
                  "character": 2
                },
                "type": "string"
              },
              "isOptional": true,
              "defaultValue": "\"gateway-server\""
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 33,
                "character": 2
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 30,
                  "character": 2
                },
                "raw": "/**\n\t * run the symphony gateway.\n\t */",
                "comment": "run the symphony gateway."
              },
              "signature": "(method) DefaultGateway.run(context: GatewayContext): Promise<ApplicationInstance>",
              "name": "run",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 33,
                    "character": 12
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 33,
                      "character": 21
                    },
                    "name": "GatewayContext"
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 33,
                  "character": 38
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 33,
                      "character": 46
                    },
                    "name": "ApplicationInstance",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 49,
                "character": 2
              },
              "signature": "(method) DefaultGateway.build(context: AppBuildContext): Promise<AppBuildResult>",
              "name": "build",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 49,
                    "character": 14
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 49,
                      "character": 23
                    },
                    "name": "AppBuildContext",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 49,
                  "character": 41
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 49,
                      "character": 49
                    },
                    "name": "AppBuildResult",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 99,
                "character": 2
              },
              "signature": "(method) DefaultGateway.deploy(context: AppDeployContext): Promise<void>",
              "name": "deploy",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "default-gateway.ts",
                    "line": 99,
                    "character": 9
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "default-gateway.ts",
                      "line": 99,
                      "character": 18
                    },
                    "name": "AppDeployContext",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "application"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "default-gateway.ts",
                  "line": 99,
                  "character": 2
                },
                "type": "Promise<void>"
              },
              "modifiers": []
            }
          ],
          "extendsNodes": [],
          "implementNodes": [
            {
              "__schema": "ExpressionWithTypeArgumentsSchema",
              "location": {
                "filePath": "default-gateway.ts",
                "line": 27,
                "character": 40
              },
              "name": "implements GatewayServer",
              "typeArgs": [],
              "expression": {
                "__schema": "InterfaceSchema",
                "location": {
                  "filePath": "gateway-server.ts",
                  "line": 4,
                  "character": 1
                },
                "name": "GatewayServer",
                "signature": "interface GatewayServer",
                "extendsNodes": [],
                "members": [
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 8,
                      "character": 3
                    },
                    "name": "name",
                    "signature": "(property) GatewayServer.name?: string",
                    "isOptional": true,
                    "type": {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 8,
                        "character": 10
                      },
                      "name": "string"
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 5,
                        "character": 3
                      },
                      "raw": "/**\n   * name of the context.\n   */",
                      "comment": "name of the context."
                    }
                  },
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 13,
                      "character": 3
                    },
                    "name": "run",
                    "signature": "(property) GatewayServer.run: (context: GatewayContext) => Promise<ApplicationInstance>",
                    "isOptional": false,
                    "type": {
                      "__schema": "FunctionLikeSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 13,
                        "character": 8
                      },
                      "name": "",
                      "modifiers": [],
                      "params": [
                        {
                          "__schema": "ParameterSchema",
                          "location": {
                            "filePath": "gateway-server.ts",
                            "line": 13,
                            "character": 9
                          },
                          "name": "context",
                          "isOptional": false,
                          "isSpread": false,
                          "type": {
                            "__schema": "TypeRefSchema",
                            "location": {
                              "filePath": "gateway-server.ts",
                              "line": 13,
                              "character": 18
                            },
                            "name": "GatewayContext"
                          }
                        }
                      ],
                      "returnType": {
                        "__schema": "TypeRefSchema",
                        "location": {
                          "filePath": "gateway-server.ts",
                          "line": 13,
                          "character": 37
                        },
                        "name": "Promise",
                        "typeArgs": [
                          {
                            "__schema": "TypeRefSchema",
                            "location": {
                              "filePath": "gateway-server.ts",
                              "line": 13,
                              "character": 45
                            },
                            "name": "ApplicationInstance",
                            "componentId": {
                              "_legacy": {
                                "scope": "teambit.harmony",
                                "name": "application",
                                "version": "latest"
                              }
                            }
                          }
                        ]
                      },
                      "signature": "(context: GatewayContext): Promise<\u001b[2m(component: teambit.harmony/application)\u001b[22m ApplicationInstance>"
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 10,
                        "character": 3
                      },
                      "raw": "/**\n   * runs the gateway.\n   */",
                      "comment": "runs the gateway."
                    }
                  },
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "gateway-server.ts",
                      "line": 18,
                      "character": 3
                    },
                    "name": "deployOptions",
                    "signature": "(property) GatewayServer.deployOptions?: DeployOptions",
                    "isOptional": true,
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 18,
                        "character": 3
                      },
                      "name": "DeployOptions",
                      "componentId": {
                        "_legacy": {
                          "scope": "bitdev.symphony",
                          "name": "backends/backend-server",
                          "version": "0.0.8"
                        }
                      }
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "gateway-server.ts",
                        "line": 15,
                        "character": 3
                      },
                      "raw": "/**\n   * deploy options.\n   */",
                      "comment": "deploy options."
                    }
                  }
                ]
              }
            }
          ]
        }
      ],
      "internals": []
    }
  ],
  "componentId": {
    "scope": "backend.kubernetes",
    "name": "examples/gateway-server",
    "version": "8881acd8e7220cda170d06c386b8a946058f8a6d"
  },
  "taggedModuleExports": []
}