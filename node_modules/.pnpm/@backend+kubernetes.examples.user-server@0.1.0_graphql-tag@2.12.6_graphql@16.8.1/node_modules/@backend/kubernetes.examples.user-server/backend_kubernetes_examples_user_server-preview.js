!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports["backend.kubernetes/examples/user-server-preview"]=r():e["backend.kubernetes/examples/user-server-preview"]=r()}(self,(()=>(()=>{"use strict";var e={d:(r,t)=>{for(var n in t)e.o(t,n)&&!e.o(r,n)&&Object.defineProperty(r,n,{enumerable:!0,get:t[n]})},o:(e,r)=>Object.prototype.hasOwnProperty.call(e,r),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},r={};e.r(r),e.d(r,{compositions:()=>i,compositions_metadata:()=>u,overview:()=>c});var t={};e.r(t),e.d(t,{default:()=>l}),React;const n=MdxJsReact,o=TeambitMdxUiMdxScopeContext;var a=["components"];function p(){return p=Object.assign?Object.assign.bind():function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},p.apply(this,arguments)}var s={},m="wrapper";function l(e){var r=e.components,t=function(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}(e,a);return(0,n.mdx)(m,p({},s,t,{components:r,mdxType:"MDXLayout"}),(0,n.mdx)(o.MDXScopeProvider,{components:{},mdxType:"MDXScopeProvider"},(0,n.mdx)("p",null,"A User service component. Provides a RESTful API for user objects and provides an API for authinticating with the Acme\nplatform."),(0,n.mdx)("h2",null,"Run the server"),(0,n.mdx)("p",null,"Import the platform and use the it in your workspace:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-bash"},"bit use user-server\n")),(0,n.mdx)("p",null,"Run the platform:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-bash"},"bit run user-server\n")),(0,n.mdx)("h2",null,"Compose to your platform"),(0,n.mdx)("p",null,"You can compose the server to a Platform app. Use the platform application type in a Bit app ",(0,n.mdx)("inlineCode",{parentName:"p"},"my-platform.bit-app.ts")," and include your server:"),(0,n.mdx)("pre",null,(0,n.mdx)("code",{parentName:"pre",className:"language-ts"},"import { Platform } from '@bitdev/platforms.platform';\n\nexport const AcmePlatform = Platform.from({\n  name: 'acme-platform',\n\n  backends: {\n    main: new AcmeGateway(),\n    services: [\n      UserServer,\n    ]\n  },\n});\n"))))}l.isMDXComponent=!0;const i=[],c=[t],u={compositions:[]};return r})()));