!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports["backend.kubernetes/kubernetes-deployer-preview"]=t():e["backend.kubernetes/kubernetes-deployer-preview"]=t()}(self,(()=>(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{compositions:()=>d,compositions_metadata:()=>m,overview:()=>s});var n={};e.r(n),e.d(n,{default:()=>c}),React;const r=MdxJsReact,o=TeambitMdxUiMdxScopeContext;var a=["components"];function p(){return p=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},p.apply(this,arguments)}var l={},i="wrapper";function c(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,a);return(0,r.mdx)(i,p({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)(o.MDXScopeProvider,{components:{},mdxType:"MDXScopeProvider"},(0,r.mdx)("p",null,"This component allows to deploy a Bit app to a Kubernetes cluster.\nThe developer should provide a Cloud Provider adapter to select where to apply the deployments. This example uses an adapter for Google Cloud Platform (Google Kubernetes Engine)."),(0,r.mdx)("h2",null,"Usage"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import { KubernetesDeployer } from '@backend/kubernetes.kubernetes-deployer';\nimport { GKEAdapter } from '@backend/kubernetes.adapters.gke';\n\nexport const AcmePlatform = Platform.from({\n  // ...\n  deploy: KubernetesDeployer.deploy({\n    files: ['./kubernetes/*.yaml'],\n    adapter: new GKEAdapter({\n      clusterName: 'acme-platform',\n      zone: 'us-central1',\n      keyJson: process.env.K8S_GOOGLE_CLOUD,\n    }),\n  }),\n});\n\nexport default AcmePlatform;\n")),(0,r.mdx)("h3",null,"Create your own adapter"),(0,r.mdx)("p",null,"To create an adapter, you need to implement the ",(0,r.mdx)("inlineCode",{parentName:"p"},"K8Adapter")," interface. From there, just implement the credential methods:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"getCredentials"),": Get the credentials to connect to the cluster.",(0,r.mdx)("ul",{parentName:"li"},(0,r.mdx)("li",{parentName:"ul"},"endpoint: The endpoint to connect to the cluster."),(0,r.mdx)("li",{parentName:"ul"},"token: The token to authenticate to the cluster."),(0,r.mdx)("li",{parentName:"ul"},"certificate - The certificate to connect to the cluster.")))),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-ts"},"import type { K8Adapter } from '@backend/kubernetes.kubernetes-deployer';\nimport type { KubernetesObjectApi } from '@kubernetes/client-node';\n\ntype MyAdapterConfig = {\n  // The configuration for the adapter. Such as the credentials, the cluster name, etc.\n};\n\nexport class MyAdapter implements K8Adapter {\n  constructor(private readonly config: MyAdapterConfig) {}\n\n  async getCredentials(): Promise<{\n    endpoint: string;\n    token: string;\n    certificate: string;\n  }> {\n    // Get the credentials from the configuration.\n    return {\n      endpoint: 'https://my-cluster-endpoint',\n      token: 'my-cluster-token',\n      certificate: 'my-cluster-certificate',\n    };\n  }\n}\n"))))}c.isMDXComponent=!0;const d=[],s=[n],m={compositions:[]};return t})()));