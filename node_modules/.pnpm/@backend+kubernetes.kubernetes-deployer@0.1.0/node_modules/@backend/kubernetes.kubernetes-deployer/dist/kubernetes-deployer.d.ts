import type { PlatformBuildContext } from "@bitdev/platforms.platform";
import type { K8Adapter } from "./adapters.js";
import { type K8ObjectGenerator } from "./generator.js";
export type K8sTaskOptions = {
    /**
     * The adapter to use to connect to the Kubernetes cluster. (e.g. GKE, EKS, AKS, etc.)
     */
    adapter: K8Adapter;
    /**
     * The files to apply to the Kubernetes cluster.
     * It can be a local file path or a URL. If it's a local file, it should be relative to the
     * config file.
     */
    files?: (K8ObjectGenerator | string)[];
    /**
     * The namespace to deploy to. If not specified, it will use the default namespace.
     */
    namespace?: string;
    /**
     * Organization to use for all the Docker images.
     * @default "Organization of the app component"
     */
    organization?: string;
};
export declare class KubernetesDeployer {
    private options;
    constructor(options: K8sTaskOptions);
    static deploy(options: K8sTaskOptions): (context: PlatformBuildContext) => Promise<void>;
    private deploy;
    private applyDeployment;
    private getGenerator;
}
