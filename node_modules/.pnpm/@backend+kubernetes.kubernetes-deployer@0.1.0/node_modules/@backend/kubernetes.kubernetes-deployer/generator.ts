import type k8s from "@kubernetes/client-node";

export interface K8ObjectGenerator {
	generate(opts?: unknown): k8s.KubernetesObject[];
}

export class DefaultGenerator implements K8ObjectGenerator {
	constructor(
		private readonly opts: {
			name: string;
			image: string;
			env?: Map<string, string>;
			expose?: boolean;
		},
	) {}

	generate(): k8s.KubernetesObject[] {
		const specs = [];

		const deployment: k8s.V1Deployment = {
			apiVersion: "apps/v1",
			kind: "Deployment",
			metadata: {
				name: `${this.opts.name}-deployment`,
				labels: {
					app: this.opts.name,
				},
			},
			spec: {
				replicas: 1,
				selector: {
					matchLabels: {
						app: this.opts.name,
					},
				},
				template: {
					metadata: {
						labels: {
							app: this.opts.name,
						},
					},
					spec: {
						containers: [
							{
								name: this.opts.name,
								image: this.opts.image,
								imagePullPolicy: "Always",
								ports: [
									{
										containerPort: 8080,
									},
								],
								env: Array.from(this.opts.env || []).map(([key, value]) => ({
									name: key,
									value: value,
								})),
								resources: {
									limits: {
										cpu: "0.5",
										memory: "512Mi",
									},
									requests: {
										cpu: "0.1",
										memory: "256Mi",
									},
								},
							},
						],
					},
				},
			},
		};

		specs.push(deployment);

		if (this.opts.expose) {
			const service: k8s.V1Service = {
				apiVersion: "v1",
				kind: "Service",
				metadata: {
					name: `${this.opts.name}-service`,
				},
				spec: {
					type: "LoadBalancer",
					selector: {
						app: this.opts.name,
					},
					ports: [
						{
							protocol: "TCP",
							port: 80,
							targetPort: 8080,
						},
					],
				},
			};

			specs.push(service);
		} else {
			// Expose an internal service to the internal network
			const service: k8s.V1Service = {
				apiVersion: "v1",
				kind: "Service",
				metadata: {
					name: `${this.opts.name}-service`,
				},
				spec: {
					selector: {
						app: this.opts.name,
					},
					ports: [
						{
							protocol: "TCP",
							port: 80,
							targetPort: 8080,
						},
					],
				},
			};

			specs.push(service);
		}

		return specs;
	}
}
