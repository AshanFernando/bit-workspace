import { merge } from 'lodash';
import { Color, ColorOptions } from './color.js';
import { sparksColorPalette } from './default-colors.js';

export type PaletteColorOptions = string|ColorOptions;

export type ColorPaletteOptions = {
  /**
   * primary color definition.
   */
  primary?: PaletteColorOptions;

  /**
   * secondary color definition.
   */
  neutral?: PaletteColorOptions;

  /**
   * error color definition.
   */
  error?: PaletteColorOptions;

  /**
   * warning color definition.
   */
  warning?: PaletteColorOptions;

  /**
   * info color definition.
   */
  info?: PaletteColorOptions;

  /**
   * success color definition.
   */
  success?: PaletteColorOptions;
};

export class ColorPalette {
  constructor(readonly colors: Color[]) {}

  /**
   * find a color
   */
  findColor(name: string) {
    return this.colors.find((color) => {
      return color.name === name;
    });
  }

  /**
   * name of the instance
   */
  get primary() {
    return this.findColor('primary');
  }

  /**
   * list of secondary colors.
   */
  get neutral() {
    return this.findColor('neutral');
  }

  /**
   * list of success colors.
   */
  get success() {
    return this.findColor('success');
  }

  /**
   * list of errors colors.
   */
  get error() {
    return this.findColor('error');
  }

  /**
   * list of warning colors.
   */
  get warning() {
    return this.findColor('warning');
  }

  /**
   * list all tokens.
   */
  listTokens() {}

  /**
   * serialize a ColorPalette into
   * a serializable object.
   */
  toObject() {
    return {
      primary: this.primary.toObject(),
      neutral: this.neutral.toObject(),
      success: this.success.toObject(),
      error: this.error.toObject(),
      warning: this.warning.toObject(),
    };
  }

  /**
   * create a ColorPalette object from a
   * plain object.
   */
  static create(plainColorPalette?: ColorPaletteOptions) {
    const colorOptions = merge(sparksColorPalette, plainColorPalette);
    const colorNames = Object.keys(colorOptions || {});

    const colors = colorNames.map((colorName) => {
      const colorOpts = colorOptions[colorName];
      if (typeof colorOpts === 'string') {
        return Color.from({ origin: colorOpts, name: colorName })
      }

      return Color.from({ ...colorOpts, name: colorName });
    });

    return new ColorPalette(colors);
  }
}
