import { computeGradient } from './compute-gradient.js';

export type Tone = {
  /**
   * name of the tone.
   */
  name: string;

  /**
   * color in hex.
   */
  value: string;
}

export type ColorOptions = {
  /**
   * name of the color.
   */
  name?: string;

  /**
   * 100 weight color.
   */
  100?: string;

  /**
   * 200 weight color.
   */
  200?: string;

  /**
   * 300 weight color.
   */
  300?: string;

  /**
   * 400 weight color.
   */
  400?: string;

  /**
   * 500 weight color.
   */
  500?: string;

  /**
   * 600 weight color.
   */
  600?: string;

  /**
   * 700 weight color.
   */
  700?: string;

  /**
   * 800 weight color.
   */
  800?: string;

  /**
   * 900 weight color.
   */
  900?: string;

  /**
   * top weight for color.
   */
  1000?: string;

  /**
   * origin color
   * synonyms to `600` color weight.
   */
  origin: string;
};

export class Color {
  constructor(
    /**
     * name of the color.
     */
    readonly name: string,

    /**
     * origin color of the scheme.
     */
    readonly origin: string,

    /**
     * color scheme
     */
    private colorScheme: string[]
  ) {}

  /**
   * first color in the scheme is always white.
   */
  get 0() {
    return '#FFFFFF';
  }

  /**
   * last color is always black.
   */
  get 1100() {
    return '#000000';
  }

  /**
   * 100 weight of the color.
   */
  get 100() {
    return this.colorScheme[0];
  }

  /**
   * 200 weight of the color.
   */  
  get 200() {
    return this.colorScheme[1];
  }

  /**
   * 300 weight of the color.
   */
  get 300() {
    return this.colorScheme[2];
  }
  
  /**
   * 400 weight of the color.
   */
  get 400() {
    return this.colorScheme[3];
  }

  /**
   * 500 weight of the color.
   */
  get 500() {
    return this.colorScheme[4];
  }

  /**
   * 600 weight of the color.
   */
  get 600() {
    return this.colorScheme[5];
  }

  /**
   * 700 weight of the color.
   */
  get 700() {
    return this.colorScheme[6];
  }

  /**
   * 800 weight of the color.
   */
  get 800() {
    return this.colorScheme[7];
  }

  /**
   * 900 weight of the color.
   */
  get 900() {
    return this.colorScheme[8];
  }

  /**
   * 1000 weight of the color.
   */
  get 1000() {
    return this.colorScheme[9];
  }

  /**
   * get the light color.
   */
  get light() {
    return this[400];
  }

  /**
   * get the dark color.
   */
  get dark() {
    return this[800];
  }

  /**
   * bold color
   * alias to 600.
   */
  get bold() {
    return this.default;
  }

  /**
   * get the main color.
   * alias to weight `600`
   */
  get default() {
    return this[600];
  }

  listToneKeys() {
    const numbers: string[] = [];
    for (let i = 100; i <= 1000; i += 100) {
      numbers.push(i.toString());
    }

    return numbers;
  }

  listTones(): Tone[] {
    const toneKeys = this.listToneKeys();
    return toneKeys.map((toneKey) => {
      return {
        name: toneKey,
        value: this[toneKey]
      };
    });
  }

  toObject(): ColorOptions {
    const weightKeys = this.listToneKeys();
    const weightObject = weightKeys.reduce((acc, weight) => {
      acc[weight] = this[weight];
      return acc;
    }, {});

    return {
      name: this.name,
      origin: this.origin,
      ...weightObject,
    }
  }

  /**
   * create a color object.
   */
  static from(plainColor?: ColorOptions) {
    const colorScheme = computeGradient(plainColor);
    if (!plainColor) return undefined;
    return new Color(plainColor.name, plainColor.origin, colorScheme);
  }
}
