import { Color, ColorOptions } from './color.js';
export type PaletteColorOptions = string | ColorOptions;
export type ColorPaletteOptions = {
    /**
     * primary color definition.
     */
    primary?: PaletteColorOptions;
    /**
     * secondary color definition.
     */
    neutral?: PaletteColorOptions;
    /**
     * error color definition.
     */
    error?: PaletteColorOptions;
    /**
     * warning color definition.
     */
    warning?: PaletteColorOptions;
    /**
     * info color definition.
     */
    info?: PaletteColorOptions;
    /**
     * success color definition.
     */
    success?: PaletteColorOptions;
};
export declare class ColorPalette {
    readonly colors: Color[];
    constructor(colors: Color[]);
    /**
     * find a color
     */
    findColor(name: string): Color;
    /**
     * name of the instance
     */
    get primary(): Color;
    /**
     * list of secondary colors.
     */
    get neutral(): Color;
    /**
     * list of success colors.
     */
    get success(): Color;
    /**
     * list of errors colors.
     */
    get error(): Color;
    /**
     * list of warning colors.
     */
    get warning(): Color;
    /**
     * list all tokens.
     */
    listTokens(): void;
    /**
     * serialize a ColorPalette into
     * a serializable object.
     */
    toObject(): {
        primary: ColorOptions;
        neutral: ColorOptions;
        success: ColorOptions;
        error: ColorOptions;
        warning: ColorOptions;
    };
    /**
     * create a ColorPalette object from a
     * plain object.
     */
    static create(plainColorPalette?: ColorPaletteOptions): ColorPalette;
}
