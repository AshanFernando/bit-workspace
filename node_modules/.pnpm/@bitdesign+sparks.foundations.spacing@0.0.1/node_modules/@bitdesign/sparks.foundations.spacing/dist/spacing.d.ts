import { SpacingWeight } from './spacing-weight.js';
export type SpacingSegment = {
    /**
     * amounts of units in the segment.
     */
    levels?: number;
    /**
     * multiplier for each.
     */
    multiplier?: number;
};
export type SpacingSegmentOptions = {
    /**
     * subunits below the base unit number.
     */
    small?: SpacingSegment;
    /**
     * subunits above base unit number.
     */
    medium?: SpacingSegment;
    /**
     * subunits for after levels of medium are concluded.
     */
    large?: SpacingSegment;
    /**
     * additional spacing segments.
     */
    [key: string]: SpacingSegment;
};
/**
 * spacing options.
 */
export type SpacingOptions = {
    /**
     * base unit in pixels.
     */
    baseUnit?: number;
    /**
     * definition of the spacing segments
     * generated for spacing.
     */
    segments?: SpacingSegmentOptions;
};
export declare const defaultSpacingOptions: SpacingOptions;
/**
 * Spacing values help to create consistent interfaces
 * by clearly defining relationships between components.
 */
export declare class Spacing {
    private options;
    readonly weights: SpacingWeight[];
    constructor(options: SpacingOptions, weights: SpacingWeight[]);
    /**
     * retrieve levels by a segment.
     */
    segment(name: string): SpacingWeight[];
    /**
     * half the size.
     */
    get half(): SpacingWeight;
    /**
     * default spacing.
     * uses the base unit level.
     */
    get default(): SpacingWeight;
    /**
     * get double
     */
    get double(): SpacingWeight;
    /**
     * get triple. the base unit size.
     */
    get triple(): SpacingWeight;
    get(weight: number): SpacingWeight;
    generateTokens(): Record<string, string>;
    /**
     * level
     */
    level(name: number): SpacingWeight;
    toObject(): {
        options: SpacingOptions;
        weights: {
            pixels: number;
            rem: string;
            token: string;
            multiplier: number;
            weight: number;
        }[];
    };
    createTokens(): {};
    /**
     * create spacing values based on options.
     */
    static create(userSpacingOptions?: SpacingOptions): Spacing;
}
