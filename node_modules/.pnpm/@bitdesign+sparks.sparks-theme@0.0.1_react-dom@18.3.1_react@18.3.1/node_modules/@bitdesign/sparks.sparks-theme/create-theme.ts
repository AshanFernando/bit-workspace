import { merge } from 'lodash';
import { createTheme as createBaseTheme } from '@teambit/base-react.themes.theme-provider';
import { ColorPalette, ColorPaletteOptions } from '@bitdesign/sparks.foundations.color-palette';
import { Spacing, SpacingOptions } from '@bitdesign/sparks.foundations.spacing';
import { createTokens } from './create-tokens.js';
import { LoadTokensContext, LoadTokensFn } from './tokens-context.js';
import { SparksThemeSchema } from './sparks-theme-tokens.js';
import { SparkThemeType } from './sparks-theme-provider.js';

export type TokenOptions<T> = {
  /**
   * clear all sparks tokens.
   */
  clear?: boolean;

  /**
   * add your token loader.
   */
  loader?: LoadTokensFn<T>
};

/**
 * breakpoint options.
 */
export type BreakpointsOptions = {
  mobile?: string;
  tablet?: string;
  laptop?: string;
  desktop?: string;
  retina?: string;
  hd?: string;
};

export type ZIndexOptions = {
  /**
   * minimum number for z-index to use.
   */
  min?: number;

  /**
   * maximum z-index allowed.
   */
  max?: number;

  /**
   * levels generated for z-indexes.
   */
  levels?: number;
}

export type TypographyOptions = {
  /**
   * regular size of the content.
   */
  fontSize?: string;
};

export type CreateThemeOptions<T> = {
  /**
   * overrides and new design tokens
   * to add to the sparks theme.
   */
  // theme?: T,

  /**
   * palette options.
   */
  palette?: ColorPaletteOptions,

  /**
   * spacing options.
   */
  spacing?: SpacingOptions,

  /**
   * breakpoint options.
   */
  breakpoints?: BreakpointsOptions,

  /**
   * zindex options.
   */
  // zIndex?: ZIndexOptions;

  /**
   * typography options.
   */
  typography?: TypographyOptions;

  /**
   * list of tokens or a token generator 
   */
  tokens?: LoadTokensFn<T>
};

/**
 * create a composition of the Sparks theme.
 */
export function createTheme<T>(options: CreateThemeOptions<T>): SparkThemeType<T> {
  const spacing = Spacing.create(options.spacing);
  const colorPalette = ColorPalette.create(options.palette);
  const createTokensContext = new LoadTokensContext(
    colorPalette,
    spacing
  );

  const sparksTheme = createTokens(createTokensContext);
  const userTheme = options.tokens ? options.tokens(createTokensContext) : undefined;
  const theme = merge(sparksTheme, userTheme);

  return createBaseTheme<T & SparksThemeSchema>({
    theme
  });
}
