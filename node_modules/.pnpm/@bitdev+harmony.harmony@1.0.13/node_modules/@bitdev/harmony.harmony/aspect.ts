import type { SlotProvider } from './slots/index.js';
import type { RuntimeManifest } from './runtimes/runtime-manifest.js';
import { RuntimeDefinition } from './runtimes/index.js';
import { getCallerPath } from './utils/get-caller.js';

export type AspectManifest = {
  /**
   * id of the aspect.
   * usually using component ID.
   */
  id?: string,

  /**
   * dependencies used by the aspect, 
   * or the respected runtime.
   */
  dependencies?: Aspect[],

  /**
   * slots to inject for use of the aspect.
   */
  slots?: SlotProvider<unknown>[],

  /**
   * package name of the aspect.
   */
  packageName?: string;
  
  /**
   * default config of the aspect.
   */
  defaultConfig?: {[key: string]: any},

  /**
   * runtimes declared by the aspect.
   */
  declareRuntime?: RuntimeDefinition,

  /**
   * files of the aspect.
   * @deprecated
   */
  files?: string[],
};

export class Aspect {
  constructor(
    public id: string,
    public dependencies: Aspect[],
    readonly slots: SlotProvider<unknown>[],
    readonly defaultConfig = {},
    readonly declareRuntime: RuntimeDefinition|undefined,
    readonly files: string[],
    readonly callerPath: string,
  ) {}

  private _runtimes: RuntimeManifest[] = [];

  addRuntime(runtimeManifest: RuntimeManifest) {
    const runtimeKey = this.getRuntimeKey(runtimeManifest.runtime);
    if (runtimeKey !== -1) {
      this._runtimes[runtimeKey] = runtimeManifest;
      return this;
    };

    this._runtimes.push(runtimeManifest);
    return this;
  }
  
  getRuntimeKey(runtimeDef: RuntimeDefinition|string) {
    const name = typeof runtimeDef === 'string'
      ? runtimeDef
      : runtimeDef.name;

    return this._runtimes.findIndex((runtime) => {
      if (typeof runtime.runtime === 'string') return runtime.runtime === name; 
      return runtime.runtime.name === name;
    });
  }

  getRuntime(runtimeDef: RuntimeDefinition|string): undefined|RuntimeManifest {
    const name = typeof runtimeDef === 'string'
      ? runtimeDef
      : runtimeDef.name;

    return this._runtimes.find((runtime) => {
      if (typeof runtime.runtime === 'string') return runtime.runtime === name; 
      return runtime.runtime.name === name;
    });
  }

  getRuntimes(): RuntimeManifest[] {
    return this._runtimes;
  }

  static create(manifest: AspectManifest) {
    const callerPath = getCallerPath();

    return new Aspect(
      manifest.id,
      manifest.dependencies || [],
      manifest.slots || [],
      manifest.defaultConfig,
      manifest.declareRuntime,
      manifest.files || [],
      callerPath,
    );
  }
}
