import type { SlotProvider } from './slots/index.js';
import type { RuntimeManifest } from './runtimes/runtime-manifest.js';
import { RuntimeDefinition } from './runtimes/index.js';
export type AspectManifest = {
    /**
     * id of the aspect.
     * usually using component ID.
     */
    id?: string;
    /**
     * dependencies used by the aspect,
     * or the respected runtime.
     */
    dependencies?: Aspect[];
    /**
     * slots to inject for use of the aspect.
     */
    slots?: SlotProvider<unknown>[];
    /**
     * package name of the aspect.
     */
    packageName?: string;
    /**
     * default config of the aspect.
     */
    defaultConfig?: {
        [key: string]: any;
    };
    /**
     * runtimes declared by the aspect.
     */
    declareRuntime?: RuntimeDefinition;
    /**
     * files of the aspect.
     * @deprecated
     */
    files?: string[];
};
export declare class Aspect {
    id: string;
    dependencies: Aspect[];
    readonly slots: SlotProvider<unknown>[];
    readonly defaultConfig: {};
    readonly declareRuntime: RuntimeDefinition | undefined;
    readonly files: string[];
    readonly callerPath: string;
    constructor(id: string, dependencies: Aspect[], slots: SlotProvider<unknown>[], defaultConfig: {}, declareRuntime: RuntimeDefinition | undefined, files: string[], callerPath: string);
    private _runtimes;
    addRuntime(runtimeManifest: RuntimeManifest): this;
    getRuntimeKey(runtimeDef: RuntimeDefinition | string): number;
    getRuntime(runtimeDef: RuntimeDefinition | string): undefined | RuntimeManifest;
    getRuntimes(): RuntimeManifest[];
    static create(manifest: AspectManifest): Aspect;
}
