import { getCallerPath } from './utils/get-caller.js';
export class Aspect {
    constructor(id, dependencies, slots, defaultConfig = {}, declareRuntime, files, callerPath) {
        this.id = id;
        this.dependencies = dependencies;
        this.slots = slots;
        this.defaultConfig = defaultConfig;
        this.declareRuntime = declareRuntime;
        this.files = files;
        this.callerPath = callerPath;
        this._runtimes = [];
    }
    addRuntime(runtimeManifest) {
        const runtimeKey = this.getRuntimeKey(runtimeManifest.runtime);
        if (runtimeKey !== -1) {
            this._runtimes[runtimeKey] = runtimeManifest;
            return this;
        }
        ;
        this._runtimes.push(runtimeManifest);
        return this;
    }
    getRuntimeKey(runtimeDef) {
        const name = typeof runtimeDef === 'string'
            ? runtimeDef
            : runtimeDef.name;
        return this._runtimes.findIndex((runtime) => {
            if (typeof runtime.runtime === 'string')
                return runtime.runtime === name;
            return runtime.runtime.name === name;
        });
    }
    getRuntime(runtimeDef) {
        const name = typeof runtimeDef === 'string'
            ? runtimeDef
            : runtimeDef.name;
        return this._runtimes.find((runtime) => {
            if (typeof runtime.runtime === 'string')
                return runtime.runtime === name;
            return runtime.runtime.name === name;
        });
    }
    getRuntimes() {
        return this._runtimes;
    }
    static create(manifest) {
        const callerPath = getCallerPath();
        return new Aspect(manifest.id, manifest.dependencies || [], manifest.slots || [], manifest.defaultConfig, manifest.declareRuntime, manifest.files || [], callerPath);
    }
}
//# sourceMappingURL=aspect.js.map