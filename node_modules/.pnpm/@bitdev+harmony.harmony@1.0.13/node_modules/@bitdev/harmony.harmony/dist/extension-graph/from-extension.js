import { extensionFactory } from '../factory/extension-factory.js';
import ExtensionPotentialCircular from '../exceptions/extension-potential-circular.js';
function getName(manifest) {
    return manifest.id || manifest.name;
}
/**
 * build vertices and edges from the given extension
 */
export function fromExtension(extension, options = {}) {
    const vertices = {};
    let edges = [];
    function iterate(root) {
        const id = options.getName ? options.getName(root) : getName(root);
        if (vertices[id])
            return;
        const instance = extensionFactory(root);
        const validDeps = instance.dependencies.filter(dep => dep).map(dep => extensionFactory(dep));
        if (instance.dependencies.length > validDeps.length) {
            throw new ExtensionPotentialCircular(instance, validDeps);
        }
        vertices[id] = instance;
        const newEdges = validDeps.map(dep => {
            return {
                sourceId: id,
                targetId: dep.name,
                edge: {
                    type: 'dependency'
                }
            };
        });
        edges = edges.concat(newEdges);
        // @ts-ignore
        instance.dependencies.forEach(dep => iterate(dep));
    }
    iterate(extension);
    // eslint-disable-next-line prefer-const
    let vertexArray = [];
    // eslint-disable-next-line no-restricted-syntax
    for (const [key, value] of Object.entries(vertices)) {
        vertexArray.push({ id: key, node: value });
    }
    return {
        vertices: vertexArray,
        edges
    };
}
/**
 * build vertices and edges from the given list of extensions
 */
export function fromExtensions(extensions, options = {}) {
    const perExtension = extensions.map(ext => fromExtension(ext, options));
    return perExtension.reduce((acc, subgraph) => {
        acc.edges = acc.edges.concat(subgraph.edges);
        acc.vertices = acc.vertices.concat(subgraph.vertices);
        return acc;
    }, { vertices: [], edges: [] });
}
//# sourceMappingURL=from-extension.js.map