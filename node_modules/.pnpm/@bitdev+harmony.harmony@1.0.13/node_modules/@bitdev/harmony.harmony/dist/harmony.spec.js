import { head } from 'lodash';
import { Aspect } from './aspect.js';
import { Harmony } from './harmony.js';
import { RuntimeDefinition } from './runtimes/runtime-definition.js';
import { Slot } from './slots/slot.js';
const uiRuntimeDef = new RuntimeDefinition('ui');
describe('Harmony', () => {
    describe('run()', () => {
        it('should return the value from the provider', async () => {
            const manifest = Aspect.create({
                id: 'hello',
                declareRuntime: uiRuntimeDef
            });
            manifest.addRuntime({
                runtime: 'ui',
                provider: async () => {
                    return 'world';
                }
            });
            const harmony = await Harmony.run([manifest], 'ui', {});
            await harmony.run();
            expect(harmony.get('hello')).toEqual('world');
        });
    });
    describe('dependencies', () => {
        it('should retrieve the response from the dependency', async () => {
            const peopleAspect = Aspect.create({
                id: 'people'
            });
            const ecommerceAspect = Aspect.create({
                id: 'platform',
                declareRuntime: uiRuntimeDef
            });
            peopleAspect.addRuntime({
                runtime: uiRuntimeDef,
                provider: async () => {
                    return 'world';
                }
            });
            ecommerceAspect.addRuntime({
                runtime: uiRuntimeDef,
                dependencies: [peopleAspect],
                provider: async ([people]) => {
                    return people;
                }
            });
            const harmony = await Harmony.run([peopleAspect, ecommerceAspect], uiRuntimeDef.name, {});
            const ecommerce = harmony.get(ecommerceAspect.id);
            expect(ecommerce).toEqual('world');
        });
    });
    describe('slots', () => {
        async function createAspectWithSlot() {
            const peopleAspect = Aspect.create({
                id: 'people',
                declareRuntime: uiRuntimeDef
            });
            peopleAspect.addRuntime({
                runtime: uiRuntimeDef,
                slots: [Slot.withType()],
                provider: async (deps, config, [slot]) => {
                    return slot;
                }
            });
            const harmony = await Harmony.run([peopleAspect], uiRuntimeDef.name);
            const people = harmony.get(peopleAspect.id);
            return people;
        }
        it('should return a slot registry', async () => {
            const people = await createAspectWithSlot();
            const isRegistry = Boolean(people.get && people.flatValues);
            expect(isRegistry).toEqual(true);
        });
        it('should return the item from the slot by its name', async () => {
            const people = await createAspectWithSlot();
            people.register([{ name: 'item', value: 2 }, { name: 'item2', value: 3 }]);
            const item = people.getByName('item');
            expect(item.value).toBe(2);
        });
        it('should contain two slot values', async () => {
            const people = await createAspectWithSlot();
            people.register([{}, {}]);
            expect(people.length).toEqual(2);
        });
        it('should sort the slot correctly', async () => {
            const people = await createAspectWithSlot();
            people.register([
                {
                    name: 'one',
                    weight: 5
                },
                {
                    name: 'two',
                    weight: 35
                },
                {
                    name: 'three',
                    weight: 1
                }
            ]);
            const sorted = people.sortByWeight();
            const first = head(sorted);
            expect(first.name).toEqual('three');
        });
    });
    describe('config', () => {
        function createAspectWithConfig() {
            const peopleAspect = Aspect.create({
                id: 'people',
                declareRuntime: uiRuntimeDef
            });
            peopleAspect.addRuntime({
                runtime: uiRuntimeDef,
                defaultConfig: {
                    hello: 'world'
                },
                provider: async (deps, config) => {
                    return config;
                }
            });
            return peopleAspect;
        }
        it('should return default config', async () => {
            const peopleAspect = createAspectWithConfig();
            const harmony = await Harmony.run([peopleAspect], uiRuntimeDef.name);
            const people = harmony.get(peopleAspect.id);
            expect(people.hello).toEqual('world');
        });
        it('should return user-defined config', async () => {
            const peopleAspect = createAspectWithConfig();
            const harmony = await Harmony.run([peopleAspect], uiRuntimeDef.name, {
                people: {
                    hello: 'there'
                }
            });
            const people = harmony.get(peopleAspect.id);
            expect(people.hello).toEqual('there');
        });
    });
});
//# sourceMappingURL=harmony.spec.js.map