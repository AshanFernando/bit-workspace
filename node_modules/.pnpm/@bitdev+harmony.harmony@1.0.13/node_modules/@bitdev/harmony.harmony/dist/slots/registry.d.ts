import { SortOptions } from "./slot-registry-options.js";
export declare class SlotRegistry<T> {
    private registerFn;
    /**
     * map of aspects associated with their
     * corresponding values.
     */
    readonly map: Map<string, T>;
    constructor(registerFn: () => string, 
    /**
     * map of aspects associated with their
     * corresponding values.
     */
    map?: Map<string, T>);
    /**
     * get a slot value by extension id.
     */
    get(id: string): T | undefined;
    /**
     * the the length of the slot.
     * computes
     */
    get length(): number;
    /**
     * get a flat list of all values.
     */
    flatValues(): T;
    /**
     * get a slot value by its 'name' property.
     * search for other values using the `key` argument.
     */
    getByName(name: string, key?: string): T | undefined;
    /**
     * sort slot values by a `weight` property.
     * use different keys.
     */
    sortByWeight({ key, direction, values: targetValues }?: SortOptions<T>): T[];
    /**
     * return an array of all slots.
     */
    toArray(): [string, T][];
    /**
     * get all registered values.
     */
    values(): T[];
    /**
     * register a new entry to the slot registry
     */
    register(value: T): void;
}
