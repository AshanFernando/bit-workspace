import { RuntimeDefinition } from './runtime-definition.js';
import DependencyGraph from '../extension-graph/extension-graph.js';
import { RuntimeNotDefined } from './exceptions/runtime-not-defined.js';

export class Runtimes {
  constructor(
    readonly runtimeDefinition: {[key: string]: RuntimeDefinition}
  ) {}  

  add(runtime: RuntimeDefinition) {
    this.runtimeDefinition[runtime.name] = runtime;
    return this;
  }

  get(name: string): RuntimeDefinition {
    const runtime = this.runtimeDefinition[name];
    if (!runtime) throw new RuntimeNotDefined(name);
    return this.runtimeDefinition[name];
  }

  list() {
    return Object.values(this.runtimeDefinition);
  }

  dispose(name: string) {
    delete this.runtimeDefinition[name];
    return this;
  }

  static async load(graph: DependencyGraph) {
    const runtimes: { [key: string]: RuntimeDefinition } = {};
    graph.extensions.forEach(manifest => {
      if (!manifest.declareRuntime) return;
      runtimes[manifest.declareRuntime.name] = manifest.declareRuntime;
    });

    return new Runtimes(runtimes);
  }
}
