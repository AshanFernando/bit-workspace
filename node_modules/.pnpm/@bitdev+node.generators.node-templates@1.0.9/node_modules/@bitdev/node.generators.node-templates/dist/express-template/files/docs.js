"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.docsFile = void 0;
const lodash_1 = require("lodash");
const docsFile = (context) => {
    const { name, namePascalCase: Name } = context;
    return {
        relativePath: `${name}.docs.mdx`,
        content: `---
labels: ['${name}', 'express', 'server', 'microservice']
description: '${(0, lodash_1.replace)(name, new RegExp('-', 'g'), ' ')}'
---

A ${name} component. Provides a RESTful API for the platform.

## Run the server 

Import the platform and use the it in your workspace:

\`\`\`bash
bit use ${name}
\`\`\`

Run the server:
\`\`\`bash
bit run ${name}
\`\`\`

## Compose to your platform

You can compose the server to a Platform app. Use the platform application type in a Bit app \`my-platform.bit-app.ts\` and include your server:
\`\`\`ts
import { Platform } from '@bitdev/platforms.platform';

export const MyPlatform = Platform.from({
  name: 'my-platform',

  backends: {
    main: new AcmeGateway(),
    services: [
      ${Name},
    ]
  },
});
\`\`\`
`,
    };
};
exports.docsFile = docsFile;
//# sourceMappingURL=docs.js.map