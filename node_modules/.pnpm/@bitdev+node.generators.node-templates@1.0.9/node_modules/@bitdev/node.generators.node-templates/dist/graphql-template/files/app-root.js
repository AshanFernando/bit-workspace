"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppRootFile = void 0;
const AppRootFile = (context) => {
    const { name, namePascalCase, nameCamelCase } = context;
    return {
        relativePath: `${name}.app-root.ts`,
        content: `import { buildSubgraphSchema } from '@apollo/subgraph';
import { ApolloServer } from '@apollo/server';
import { startStandaloneServer } from '@apollo/server/standalone';
import { ${nameCamelCase}Schema } from './${name}.graphql.js';
import { ${namePascalCase} } from './${name}.js';

/**
 * bootstrap function for the server.
 */
export async function run() {
  // ports are injects by Bit to \`process.env.PORT\`
  const port = parseInt(process.env.PORT) || 3000;
  const ${context.nameCamelCase} = ${namePascalCase}.from();
  
  const { typeDefs, resolvers } = ${nameCamelCase}Schema(${context.nameCamelCase});
  // The ApolloServer constructor requires two parameters: your schema
  // definition and your set of resolvers.
  const server = new ApolloServer({
    schema: buildSubgraphSchema({ typeDefs, resolvers })
  });

  // Passing an ApolloServer instance to the \`startStandaloneServer\` function:
  //  1. creates an Express app
  //  2. installs your ApolloServer instance as middleware
  //  3. prepares your app to handle incoming requests
  const { url } = await startStandaloneServer(server, {
    listen: {
      port
    }
  });

  console.log(\`ðŸš€  Server ready at: \${url}\`);

  return {
    port,
    // implement stop to support HMR.
    stop: async () => {
      await server.stop();
    }
  };
}
`,
    };
};
exports.AppRootFile = AppRootFile;
//# sourceMappingURL=app-root.js.map