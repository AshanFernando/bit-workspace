import { ComponentContext } from '@teambit/generator';

export function graphqlFile(context: ComponentContext) {
  const { nameCamelCase, namePascalCase, name } = context;

  return {relativePath: `${context.name}.graphql.ts`, content: `import { gql } from 'graphql-tag';
import { DocumentNode } from 'graphql';
import { GraphQLResolverMap } from '@apollo/subgraph/dist/schema-helper';
import { ${namePascalCase} } from './${name}.js';

export type ServerSchema = {
  typeDefs: DocumentNode,
  resolvers: GraphQLResolverMap
}

export function ${nameCamelCase}Schema(${nameCamelCase}: ${namePascalCase}): ServerSchema {
  const typeDefs = gql\`#graphql
  # The "Query" type is special: it lists all of the available queries that
  # clients can execute, along with the return type for each. In this
  # case, the "users" query returns an array of zero or more Users (defined above).
  type Query {
    hello: String
  }
\`;

  const resolvers = {
    Query: {
      hello: async () => {
        return ${nameCamelCase}.getHello();
      },
    },
  };

  return {
    typeDefs,
    resolvers
  };
} 
`}
}
