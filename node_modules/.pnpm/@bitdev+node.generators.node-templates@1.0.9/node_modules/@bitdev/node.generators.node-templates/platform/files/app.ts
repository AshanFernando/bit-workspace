import { ComponentContext } from '@teambit/generator';

export const expressAppFile = (context: ComponentContext) => {
  const { name, namePascalCase: Name } = context;

  return {
    relativePath: `${name}.ts`,
    content: `import { GatewayContext } from '@bitdev/platforms.platform';
import { startStandaloneServer } from '@apollo/server/standalone';
import { ApolloGateway, IntrospectAndCompose } from '@apollo/gateway';
import { ApolloServer } from "@apollo/server";
import { ApplicationInstance } from '@teambit/application';

export async function run(context: GatewayContext): Promise<ApplicationInstance> {
  const port = parseInt(process.env.PORT, 10) || context.port || 3000;
  const gateway = new ApolloGateway({
    supergraphSdl: new IntrospectAndCompose({
      /**
       * include all the running services in the supergraph.
       */
      subgraphs: context.services.map((service) => {
        return {
          name: service.appName,
          url: service.url || \`http://localhost:\${service.port}/graphql\`
        } 
      })
    }),
  });

  const server = new ApolloServer({ gateway });

  // Note the top-level await!
  const { url } = await startStandaloneServer(server, {
    listen: {
      port
    }
  });

  return {
    appName: this.name,
    port,
    url
  }
}

export default {
  name: 'acme-gateway',
  run
}
`,
  };
};
