import { ReactEnv } from '@bitdev/react.react-env';
import type { ReactEnvInterface } from '@bitdev/react.react-env';
import { Compiler } from '@teambit/compiler';
import { EnvHandler } from '@teambit/envs';
import { Tester } from '@teambit/tester';
import { Preview } from '@teambit/preview';
import { PackageGenerator } from '@teambit/pkg';
import { StarterList, TemplateList } from '@teambit/generator';
import { Pipeline } from '@teambit/builder';
import { ConfigWriterList } from '@teambit/workspace-config-files';
import { SchemaExtractor } from '@teambit/schema';
export declare class NodeEnv extends ReactEnv implements ReactEnvInterface {
    /**
     * name of the environment. used for friendly mentions across bit.
     */
    name: string;
    /**
     * icon for the env. use this to build a more friendly env.
     * uses react by default.
     */
    icon: string;
    /**
     * return an instance of a Compiler. use components like typescript-compiler (teambit.typescript/typescript-compiler)
     * or our babel-compiler (teambit.compilation/babel-compiler).
     * @example
     * return TypescriptCompiler.from({
     *  tsconfig: require.resolve("./config/tsconfig.json"), // path to tsconfig.json
     *  types: resolveTypes(__dirname, ["./types"]),
     *  typescript,
     * });
     */
    compiler(): EnvHandler<Compiler>;
    /**
     * returns an instance of a Bit tester implementation. use components like mocha-tester or
     * jest-tester or [build your own](http/://bit.dev/reference/testing/set-up-tester).
     */
    tester(): EnvHandler<Tester>;
    /**
     * return an instance of a Bit preview instance. used for preview purposes.
     * base preview is a general purpose webpack preview.
     */
    preview(): EnvHandler<Preview>;
    /**
     * returns an instance of the default ESLint.
     * config files would be used to validate coding standards in components.
     * bit will write the minimum required files in any workspace to optimize
     * for dev experience.
     */
    linter(): EnvHandler<import("@teambit/linter").Linter>;
    /**
     * used by bit's formatter. helps to standardize and automate
     * code styling. can be used a build task or using bit lint and common
     * ides.
     */
    formatter(): EnvHandler<import("@teambit/formatter").Formatter>;
    /**
     * a list of starters for new projects. this helps create a quick and
     * standardized
     */
    starters(): (context: import("@teambit/envs").EnvContext) => StarterList;
    /**
     * set a list of component templates to use across your
     * workspaces. new workspaces would be set to include
     * your envs by default.
     */
    generators(): (context: import("@teambit/envs").EnvContext) => TemplateList;
    /**
     * define the build pipeline for a component.
     * pipelines are optimized for performance and consistency.
     * making sure every component is independently built and tested.
     */
    build(): Pipeline;
    /**
     * add build tasks to execute upon [snap](https://bit.dev/docs/snaps).
     * use the snap pipeline for staging and test deployments
     */
    snap(): Pipeline;
    /**
     * add build tasks to execute upon [tag](https://bit.dev/docs/tags).
     * use the tag pipeline for deployments, or other tasks required for
     * publishing a semantic version for a component.
     */
    tag(): Pipeline;
    /**
     * configure and control the packaging process of components.
     */
    package(): EnvHandler<PackageGenerator>;
    workspaceConfig(): ConfigWriterList;
    /**
     * returns an instance of the default TypeScript extractor.
     * used by default for type inference for both JS and TS.
     */
    schemaExtractor(): EnvHandler<SchemaExtractor>;
    protected tsconfigPath: string;
    protected tsTypesPath: string;
    protected jestConfigPath: string;
    protected eslintConfigPath: string;
    protected eslintExtensions: string[];
    protected prettierConfigPath: string;
    protected prettierExtensions: string[];
    protected previewMounter: string;
    /**
     * Default npm ignore paths.
     * Will ignore the "artifacts" directory by default.
     */
    npmIgnore: string[];
}
declare const _default: NodeEnv;
export default _default;
