"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NodeEnv = void 0;
function _react() {
  const data = require("@bitdev/react.react-env");
  _react = function () {
    return data;
  };
  return data;
}
function _vite() {
  const data = require("@teambit/vite.vitest-tester");
  _vite = function () {
    return data;
  };
  return data;
}
function _typescript() {
  const data = require("@teambit/typescript");
  _typescript = function () {
    return data;
  };
  return data;
}
function _preview() {
  const data = require("@teambit/preview.react-preview");
  _preview = function () {
    return data;
  };
  return data;
}
function _typescript2() {
  const data = require("@teambit/typescript.typescript-compiler");
  _typescript2 = function () {
    return data;
  };
  return data;
}
function _defender() {
  const data = require("@teambit/defender.eslint-linter");
  _defender = function () {
    return data;
  };
  return data;
}
function _defender2() {
  const data = require("@teambit/defender.prettier-formatter");
  _defender2 = function () {
    return data;
  };
  return data;
}
function _pkg() {
  const data = require("@teambit/pkg");
  _pkg = function () {
    return data;
  };
  return data;
}
function _generator() {
  const data = require("@teambit/generator");
  _generator = function () {
    return data;
  };
  return data;
}
function _nodeGenerators() {
  const data = require("@bitdev/node.generators.node-templates");
  _nodeGenerators = function () {
    return data;
  };
  return data;
}
function _nodeGenerators2() {
  const data = require("@bitdev/node.generators.node-starters");
  _nodeGenerators2 = function () {
    return data;
  };
  return data;
}
function _builder() {
  const data = require("@teambit/builder");
  _builder = function () {
    return data;
  };
  return data;
}
function _workspaceConfigFiles() {
  const data = require("@teambit/workspace-config-files");
  _workspaceConfigFiles = function () {
    return data;
  };
  return data;
}
function _toolboxPerformance() {
  const data = require("@teambit/toolbox.performance.v8-cache");
  _toolboxPerformance = function () {
    return data;
  };
  return data;
}
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : String(i); }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // import { TemplateList } from "@teambit/generator";
// import { ReactComponentTemplate } from "@teambit/react.generator.react-templates";
// import { EslintTask } from "@teambit/defender.eslint-linter";
// import webpack from "webpack";
// import { Pipeline } from "@teambit/builder";
// import { SchemaExtractor } from "@teambit/schema";
// import webpackTransformer from "./config/webpack.config";
// Disable v8-caching because it breaks ESM loaders
_toolboxPerformance().NativeCompileCache.uninstall();
class NodeEnv extends _react().ReactEnv {
  constructor(...args) {
    super(...args);
    /**
     * name of the environment. used for friendly mentions across bit.
     */
    _defineProperty(this, "name", 'node-env');
    /**
     * icon for the env. use this to build a more friendly env.
     * uses react by default.
     */
    _defineProperty(this, "icon", 'https://static.bit.dev/extensions-icons/nodejs.svg');
    _defineProperty(this, "tsconfigPath", require.resolve('./config/tsconfig.json'));
    _defineProperty(this, "tsTypesPath", './types');
    _defineProperty(this, "jestConfigPath", require.resolve('./config/jest.config'));
    _defineProperty(this, "eslintConfigPath", require.resolve('./config/eslintrc.js'));
    _defineProperty(this, "eslintExtensions", ['.ts', '.tsx', '.js', '.jsx', '.mjs']);
    _defineProperty(this, "prettierConfigPath", require.resolve('./config/prettier.config.js'));
    _defineProperty(this, "prettierExtensions", ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.cjs', '.json', '.css', '.scss', '.md', '.mdx', '.html', '.yml', '.yaml']);
    _defineProperty(this, "previewMounter", require.resolve('./preview/mounter'));
    /**
     * Default npm ignore paths.
     * Will ignore the "artifacts" directory by default.
     */
    _defineProperty(this, "npmIgnore", [`${_builder().CAPSULE_ARTIFACTS_DIR}/`]);
  }
  /**
   * return an instance of a Compiler. use components like typescript-compiler (teambit.typescript/typescript-compiler)
   * or our babel-compiler (teambit.compilation/babel-compiler).
   * @example
   * return TypescriptCompiler.from({
   *  tsconfig: require.resolve("./config/tsconfig.json"), // path to tsconfig.json
   *  types: resolveTypes(__dirname, ["./types"]),
   *  typescript,
   * });
   */

  // TODO: make sure we only run compiler once @david.
  compiler() {
    return _typescript2().TypescriptCompiler.from({
      esm: true,
      tsconfig: this.tsconfigPath,
      types: (0, _typescript2().resolveTypes)(__dirname, [this.tsTypesPath])
    });
  }

  /**
   * returns an instance of a Bit tester implementation. use components like mocha-tester or
   * jest-tester or [build your own](http/://bit.dev/reference/testing/set-up-tester).
   */
  tester() {
    return _vite().VitestTester.from({
      config: require.resolve('./config/vitest.config.mjs')
    });
    // return MochaTester.from({
    //   mochaConfigPath: require.resolve('./config/.mocharc.js'),
    //   babelConfig: require.resolve('./config/mocha-babel-config.js'),
    // });
  }

  /**
   * return an instance of a Bit preview instance. used for preview purposes.
   * base preview is a general purpose webpack preview.
   */
  preview() {
    return _preview().ReactPreview.from({
      /**
       * override the default docs template for components.
       */
      // docsTemplate: require.resolve('./preview/docs'),
      /**
       * mounters are used to mount components to DOM
       * during preview. use them for wrapping your components
       * with routing, theming, data fetching or other types
       * of providers.
       */
      previewConfig: {
        splitComponentBundle: false,
        strategyName: 'component'
      }
      // mounter: require.resolve('./preview/mounter'),
      // webpackModulePath: require.resolve("webpack"),
      // webpackDevServerModulePath: require.resolve("webpack-dev-server")
      // transformers: [webpackTransformer],
    });
  }

  /**
   * returns an instance of the default ESLint.
   * config files would be used to validate coding standards in components.
   * bit will write the minimum required files in any workspace to optimize
   * for dev experience.
   */
  linter() {
    return _defender().ESLintLinter.from({
      tsconfig: this.tsconfigPath,
      configPath: this.eslintConfigPath,
      // resolve all plugins from the react environment.
      pluginsPath: __dirname,
      extensions: this.eslintExtensions
    });
  }

  /**
   * used by bit's formatter. helps to standardize and automate
   * code styling. can be used a build task or using bit lint and common
   * ides.
   */
  formatter() {
    return _defender2().PrettierFormatter.from({
      configPath: this.prettierConfigPath
    });
  }

  /**
   * a list of starters for new projects. this helps create a quick and
   * standardized
   */
  starters() {
    return _generator().StarterList.from([_nodeGenerators2().NodeWorkspaceStarter.from()]);
  }

  /**
   * set a list of component templates to use across your
   * workspaces. new workspaces would be set to include
   * your envs by default.
   */
  generators() {
    return _generator().TemplateList.from([_nodeGenerators().NodeEnvTemplate.from(), _nodeGenerators().EntityTemplate.from(), _nodeGenerators().NodeModuleTemplate.from(), _nodeGenerators().PlatformTemplate.from(), _nodeGenerators().NodeAppTemplate.from(), _nodeGenerators().ExpressAppTemplate.from(), _nodeGenerators().BitAppTemplate.from(), _nodeGenerators().GraphQLServerTemplate.from()]);
  }

  /**
   * define the build pipeline for a component.
   * pipelines are optimized for performance and consistency.
   * making sure every component is independently built and tested.
   */
  build() {
    return _builder().Pipeline.from([_typescript2().TypescriptTask.from({
      tsconfig: this.tsconfigPath,
      types: (0, _typescript2().resolveTypes)(__dirname, [this.tsTypesPath])
    }), _vite().VitestTask.from({
      config: require.resolve('./config/vitest.config.mjs')
    })]);
  }

  /**
   * add build tasks to execute upon [snap](https://bit.dev/docs/snaps).
   * use the snap pipeline for staging and test deployments
   */
  snap() {
    return _builder().Pipeline.from([]);
  }

  /**
   * add build tasks to execute upon [tag](https://bit.dev/docs/tags).
   * use the tag pipeline for deployments, or other tasks required for
   * publishing a semantic version for a component.
   */
  tag() {
    return _builder().Pipeline.from([]);
  }

  /**
   * configure and control the packaging process of components.
   */
  package() {
    return _pkg().PackageGenerator.from({
      packageJson: {
        main: 'dist/{main}.js',
        types: '{main}.ts',
        type: 'module'
      },
      npmIgnore: this.npmIgnore
    });
  }
  workspaceConfig() {
    return _workspaceConfigFiles().ConfigWriterList.from([_typescript2().TypescriptConfigWriter.from({
      tsconfig: this.tsconfigPath,
      types: (0, _typescript2().resolveTypes)(__dirname, ["./types"])
    }), _defender().EslintConfigWriter.from({
      configPath: this.eslintConfigPath,
      tsconfig: this.tsconfigPath
    }), _defender2().PrettierConfigWriter.from({
      configPath: this.prettierConfigPath
    })]);
  }

  /**
   * returns an instance of the default TypeScript extractor.
   * used by default for type inference for both JS and TS.
   */
  schemaExtractor() {
    return _typescript().TypeScriptExtractor.from({
      tsconfig: require.resolve("./config/tsconfig.json")
    });
  }
}
exports.NodeEnv = NodeEnv;
var _default = exports.default = new NodeEnv();

//# sourceMappingURL=node-env.bit-env.js.map