!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports["bitdev.platforms/platform-preview"]=n():e["bitdev.platforms/platform-preview"]=n()}(self,(()=>(()=>{"use strict";var e={d:(n,t)=>{for(var o in t)e.o(t,o)&&!e.o(n,o)&&Object.defineProperty(n,o,{enumerable:!0,get:t[o]})},o:(e,n)=>Object.prototype.hasOwnProperty.call(e,n),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},n={};e.r(n),e.d(n,{compositions:()=>i,compositions_metadata:()=>d,overview:()=>c});var t={};e.r(t),e.d(t,{default:()=>l}),React;const o=MdxJsReact,r=TeambitMdxUiMdxScopeContext;var a=["components"];function m(){return m=Object.assign?Object.assign.bind():function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},m.apply(this,arguments)}var p={},s="wrapper";function l(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}(e,a);return(0,o.mdx)(s,m({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)(r.MDXScopeProvider,{components:{},mdxType:"MDXScopeProvider"},(0,o.mdx)("p",null,"Use platform to create to stitch Bit apps into composable architectures."),(0,o.mdx)("h2",null,"Get started"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"bit create platform acme-platform\n")),(0,o.mdx)("p",null,"This command will create a new platform component, using two servers"),(0,o.mdx)("h3",null,"Compose backend and frontend"),(0,o.mdx)("p",null,"Compose a backend and a frontend by creating a platform and returning it as a bit app:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { Platform } from '@bitdev/platforms.platform';\n\nconst AcmeWeb = import.meta.resolve('@bitdev/platforms.examples.acme-web');\nconst UserServer = import.meta.resolve('@bitdev/node.examples.user-server');\n\nexport const AcmePlatform = Platform.from({\n  name: 'acme-platform',\n\n  frontends: {\n    main: AcmeWeb,\n  },\n\n  backends: {\n    main: UserServer,\n  },\n});\n")),(0,o.mdx)("p",null,"You can control port ranges by using the ",(0,o.mdx)("inlineCode",{parentName:"p"},"portRange")," option on either on your backend and frontend."),(0,o.mdx)("h3",null,"Compose a micro-frontend architecture"),(0,o.mdx)("p",null,"Use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"services")," option to compose a service architecture for either your frontend or backend:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { Platform } from '@bitdev/platforms.platform';\n\nconst AcmeWeb = import.meta.resolve('@bitdev/platforms.examples.acme-web');\nconst AcmeGateway = import.meta.resolve('./acme-gateway.js');\nconst UserServer = import.meta.resolve('@bitdev/node.examples.user-server');\nconst DiscussionServer = import.meta.resolve('@bitdev/platforms.examples.discussion-server');\n\nexport const AcmePlatform = Platform.from({\n  name: 'acme-platform',\n\n  backends: {\n    main: AcmeGateway,\n    services: [\n      [UserServer, {\n        remoteUrl: 'http://acme.com:8080',\n      }],\n      DiscussionServer,\n    ],\n  },\n});\n")),(0,o.mdx)("h2",null,"Using remote URLs"),(0,o.mdx)("p",null,"You can configure services using tupples to add a remote URL to use in case the component is not present in your workspace:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"export const AcmePlatform = Platform.from({\n  name: 'acme-platform',\n\n  backends: {\n    main: AcmeGateway,\n    services: [\n      [UserServer, {\n        remoteUrl: 'http://users.acme.com',\n      }],\n    ],\n  },\n});\n")),(0,o.mdx)("p",null,"You can use the ",(0,o.mdx)("inlineCode",{parentName:"p"},"forceRemote")," option to force a service to be used remotely even in cases the service exist locally."),(0,o.mdx)("h2",null,"Build"),(0,o.mdx)("p",null,"You can add a build function by pass it to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"build")," option and:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { build } from 'esbuild';\n\nexport async function build(context: PlatformBuildContext): Promise<AppBuildResult> {\n  const platformComponents = context.platformComponents;\n  const path = import.meta.resolve('./gateway');\n  const results = await build({\n    entryPoints: [path],\n    bundle: true,\n    platform: 'node'\n  })\n}\n")),(0,o.mdx)("p",null,"Learn more on build app ",(0,o.mdx)("a",{parentName:"p",href:"https://bit.dev/reference/apps/build-apps"},"build tasks"),"."),(0,o.mdx)("h2",null,"Deploy"),(0,o.mdx)("p",null,"You can deploy platform specific deployment logic by implemeting the ",(0,o.mdx)("inlineCode",{parentName:"p"},"deploy")," function, the example above demonstrates executing a command:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-ts"},"import { exec } from 'node:child_process';\n\nexport function deploy(context: PlatformBuildContext): Promise<AppBuildResult> {  \n  const response = exec(`s3-upload ${context}`);\n}\n")),(0,o.mdx)("p",null,"Learn more on build app ",(0,o.mdx)("a",{parentName:"p",href:"https://bit.dev/reference/apps/build-apps"},"build tasks"),"."),(0,o.mdx)("h2",null,"More composable patterns"),(0,o.mdx)("p",null,"Looking to compose using Aspects? Try ",(0,o.mdx)("a",{parentName:"p",href:"https://bit.cloud/bitdev/harmony"},"Harmony")," out.")))}l.isMDXComponent=!0;const i=[],c=[t],d={compositions:[]};return n})()));