import type { AppBuildContext, AppDeployContext, Application, ApplicationInstance } from "@teambit/application";
import { AppContext } from "@teambit/application";
import { ComponentID } from "@teambit/component-id";
import type { Component } from "@teambit/component";
import { PlatformBuildFn, PlatformDeployFn, PlatformOptions } from "./platform-options.js";
import { PlatformService, PlatformServiceModule } from "./platform-service.js";
import { PlatformLayer } from "./platform-layer.js";
export declare class Platform implements Application {
    /**
     * name of the platform
     */
    readonly name: string;
    /**
     * backends of the platform.
     */
    readonly backends: PlatformLayer;
    /**
     * frontends of the platform
     */
    readonly frontends: PlatformLayer;
    /**
     * custom build function.
     */
    readonly userBuild?: PlatformBuildFn;
    /**
     * custom deploy function.
     */
    readonly userDeploy?: PlatformDeployFn;
    constructor(
    /**
     * name of the platform
     */
    name: string, 
    /**
     * backends of the platform.
     */
    backends: PlatformLayer, 
    /**
     * frontends of the platform
     */
    frontends: PlatformLayer, 
    /**
     * custom build function.
     */
    userBuild?: PlatformBuildFn, 
    /**
     * custom deploy function.
     */
    userDeploy?: PlatformDeployFn);
    run(context: AppContext): Promise<ApplicationInstance>;
    private listPlatformModules;
    runPlatformLayer(name: string, context: AppContext, platformLayer: PlatformLayer, apiGateway?: ApplicationInstance): Promise<ApplicationInstance>;
    private computeEnvVars;
    getAppInstance(res: number | ApplicationInstance, service?: PlatformServiceModule): {
        port?: number;
        appName: string;
        url?: string;
        stop?: () => Promise<void>;
    };
    private getWorkspace;
    getComponent(context: AppContext, id: ComponentID): Promise<Component>;
    loadPlatformService(serviceOpts: PlatformService, targetPort: number, context: AppContext): Promise<PlatformServiceModule>;
    private findBitApp;
    private createPlatformContext;
    build(context: AppBuildContext): Promise<import("@teambit/application").AppBuildResult>;
    deploy(context: AppDeployContext): Promise<any>;
    static from(options: PlatformOptions): Platform;
}
