// import * as appExports from "@teambit/application";
import { AppContext } from '@teambit/application';
import type { Application, ApplicationInstance } from '@teambit/application';

// const app = appExports.default;

export class GatewayContext extends AppContext {
  constructor(
    readonly appContext: AppContext,
    readonly services: ApplicationInstance[],
    readonly port: number,
    readonly envVars: Record<string, string>
  ) {
    super(
      appContext.appName,
      appContext.harmony,
      appContext.dev,
      appContext.appComponent,
      appContext.workdir,
      appContext.execContext,
      appContext.hostRootDir,
      port || appContext.port,
      appContext.workspaceComponentPath,
      envVars,
    )
  }

  static from(appContext: AppContext, services?: ApplicationInstance[], port?: number, envVars: Record<string, string> = {}) {
    return new GatewayContext(appContext, services, port, envVars);
  }
};

export interface GatewayServer extends Application {
  /**
   * run the application.
   */
  run(context: GatewayContext): Promise<ApplicationInstance>;
}
