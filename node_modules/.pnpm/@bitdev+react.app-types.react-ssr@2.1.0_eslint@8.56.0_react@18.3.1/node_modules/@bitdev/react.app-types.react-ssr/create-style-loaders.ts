import { generateStyleLoaders } from '@teambit/webpack.modules.generate-style-loaders';
import { merge } from 'lodash';

const getCSSModuleLocalIdent = require('react-dev-utils/getCSSModuleLocalIdent');
const stylesRegexps = require('@teambit/webpack.modules.style-regexps');
const postCssConfig = require('./post-css-config');

export function createStyleLoaders(injectingLoader: string, options?: any) {
  const baseStyleLoadersOptions = {
    injectingLoader,
    injectingLoaderOptions: options,
    cssLoaderPath: require.resolve('css-loader'),
    postCssLoaderPath: require.resolve('postcss-loader'),
    postCssConfig,
  };

  return [
    {
      test: stylesRegexps.cssNoModulesRegex,
      use: generateStyleLoaders(
        merge({}, baseStyleLoadersOptions, {
          cssLoaderOpts: {
            importLoaders: 1,
            sourceMap: true,
          },
        })
      ),
      // Don't consider CSS imports dead code even if the
      // containing package claims to have no side effects.
      // Remove this when webpack adds a warning or an error for this.
      // See https://github.com/webpack/webpack/issues/6571
      sideEffects: true,
    },
    // Adds support for CSS Modules (https://github.com/css-modules/css-modules)
    // using the extension .module.css
    {
      test: stylesRegexps.cssModuleRegex,
      use: generateStyleLoaders(
        merge({}, baseStyleLoadersOptions, {
          cssLoaderOpts: {
            importLoaders: 1,
            sourceMap: true,
            modules: {
              getLocalIdent: getCSSModuleLocalIdent,
            },
          },
          shouldUseSourceMap: true
        })
      ),
    },
    // Opt-in support for SASS (using .scss or .sass extensions).
    // By default we support SASS Modules with the
    // extensions .module.scss or .module.sass
    {
      test: stylesRegexps.sassNoModuleRegex,
      use: generateStyleLoaders(
        merge({}, baseStyleLoadersOptions, {
          cssLoaderOpts: {
            importLoaders: 3,
            sourceMap: true,
          },
          shouldUseSourceMap: true,
          preProcessOptions: {
            resolveUrlLoaderPath: require.resolve('resolve-url-loader'),
            preProcessorPath: require.resolve('sass-loader'),
          },
        })
      ),
      // Don't consider CSS imports dead code even if the
      // containing package claims to have no side effects.
      // Remove this when webpack adds a warning or an error for this.
      // See https://github.com/webpack/webpack/issues/6571
      sideEffects: true,
    },
    // Adds support for CSS Modules, but using SASS
    // using the extension .module.scss or .module.sass
    {
      test: stylesRegexps.sassModuleRegex,
      use: generateStyleLoaders(
        merge({}, baseStyleLoadersOptions, {
          cssLoaderOpts: {
            importLoaders: 3,
            sourceMap: true,
            modules: {
              getLocalIdent: getCSSModuleLocalIdent,
            },
          },
          shouldUseSourceMap: true,
          preProcessOptions: {
            resolveUrlLoaderPath: require.resolve('resolve-url-loader'),
            preProcessorPath: require.resolve('sass-loader'),
          },
        })
      ),
    },
    {
      test: stylesRegexps.lessNoModuleRegex,
      use: generateStyleLoaders(
        merge({}, baseStyleLoadersOptions, {
          cssLoaderOpts: {
            importLoaders: 1,
            sourceMap: true,
          },
          shouldUseSourceMap: true,
          preProcessOptions: {
            resolveUrlLoaderPath: require.resolve('resolve-url-loader'),
            preProcessorPath: require.resolve('less-loader'),
          },
        })
      ),
      // Don't consider CSS imports dead code even if the
      // containing package claims to have no side effects.
      // Remove this when webpack adds a warning or an error for this.
      // See https://github.com/webpack/webpack/issues/6571
      sideEffects: true,
    },
    {
      test: stylesRegexps.lessModuleRegex,
      use: generateStyleLoaders(
        merge({}, baseStyleLoadersOptions, {
          cssLoaderOpts: {
            importLoaders: 1,
            sourceMap: true,
            modules: {
              getLocalIdent: getCSSModuleLocalIdent,
            },
          },
          shouldUseSourceMap: true,
          preProcessOptions: {
            resolveUrlLoaderPath: require.resolve('resolve-url-loader'),
            preProcessorPath: require.resolve('less-loader'),
          },
        })
      ),
    },
  ]
}
