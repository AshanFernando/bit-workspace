import "react-refresh";
import "esbuild";
import { AppBuildContext, AppBuildResult, AppContext, Application, ApplicationInstance, DeployFn } from "@teambit/application";
import { WebpackConfigTransformer } from "./run-transformers.js";
import type { ReactSsrOptions } from "./react-ssr-type.js";
export declare class ReactSsr implements Application {
    /**
     * name of the app.
     */
    readonly name: string;
    /**
     * entries
     */
    /**
     * filename for the bundle target.
     */
    readonly filename: string;
    /**
     * default port for the dev server and preview.
     */
    readonly portRange: number[];
    /**
     * path for the output of webpack on the component filesystem.
     */
    readonly publicPath: string;
    /**
     * path to write server bundle.
     */
    readonly serverPath: string;
    /**
     * webpack config. overrides default react config.
     * used for development purposes only via Webpack Dev Server (WDS).
     */
    readonly transformers: WebpackConfigTransformer[];
    /**
     * name of the artifact.
     */
    readonly artifactName: string;
    /**
     * root for the server.
     */
    readonly serverRoot: string;
    /**
     * relative path to distribution dir.
     * default is: dist
     */
    readonly compileOutDir: string;
    /**
     * root for the client.
     */
    readonly clientRoot: string;
    /**
     * deploy task
     */
    readonly deploy?: DeployFn;
    /**
     * use a custom index.html path in the app.
     */
    readonly indexHtml?: string;
    /**
     * determine whether to use ssr.
     */
    readonly ssr: boolean;
    /**
     * target exec file.
     */
    readonly execFile: string;
    constructor(
    /**
     * name of the app.
     */
    name: string, 
    /**
     * entries
     */
    /**
     * filename for the bundle target.
     */
    filename: string, 
    /**
     * default port for the dev server and preview.
     */
    portRange: number[], 
    /**
     * path for the output of webpack on the component filesystem.
     */
    publicPath: string, 
    /**
     * path to write server bundle.
     */
    serverPath: string, 
    /**
     * webpack config. overrides default react config.
     * used for development purposes only via Webpack Dev Server (WDS).
     */
    transformers: WebpackConfigTransformer[], 
    /**
     * name of the artifact.
     */
    artifactName?: string, 
    /**
     * root for the server.
     */
    serverRoot?: string, 
    /**
     * relative path to distribution dir.
     * default is: dist
     */
    compileOutDir?: string, 
    /**
     * root for the client.
     */
    clientRoot?: string, 
    /**
     * deploy task
     */
    deploy?: DeployFn, 
    /**
     * use a custom index.html path in the app.
     */
    indexHtml?: string, 
    /**
     * determine whether to use ssr.
     */
    ssr?: boolean, 
    /**
     * target exec file.
     */
    execFile?: string);
    /**
     * runs the app local dev server.
     * supports SSR.
     */
    run(context: AppContext): Promise<ApplicationInstance>;
    private getIndexHtml;
    get outputDir(): string;
    get execFilePath(): string;
    private runBuild;
    private transform;
    build(context: AppBuildContext): Promise<AppBuildResult>;
    static from(options: ReactSsrOptions): ReactSsr;
}
