const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const TerserPlugin = require('terser-webpack-plugin');
const WebpackAssetsManifest = require('webpack-assets-manifest');
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
const { compact } = require('lodash');
const webpack = require('webpack');
const IgnoreDynamicRequire = require('webpack-ignore-dynamic-require');
const { createStyleLoaders } = require('./create-style-loaders');
const imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '10000', 10);
module.exports = (options, production = false, ssr = true) => {
    return {
        name: options.name || 'server',
        // ...options,
        mode: !production ? 'development' : 'production',
        target: ssr ? 'node' : 'web',
        // watch: true,
        output: {
            path: options.outputPath,
            publicPath: options.publicPath,
            chunkFilename: 'static/js/[name].[contenthash:8].js',
            filename: options.filename || '[name].[contenthash:8].js',
            libraryTarget: ssr ? 'commonjs' : undefined,
        },
        entry: [...options.entries],
        plugins: compact([
            options.envVars ? new webpack.EnvironmentPlugin(options.envVars) : undefined,
            !ssr ? new WebpackAssetsManifest() : undefined,
            new IgnoreDynamicRequire(),
            new MiniCssExtractPlugin({
                // Options similar to the same options in webpackOptions.output
                // both options are optional
                filename: 'static/css/[name].[contenthash:8].css',
                chunkFilename: 'static/css/[name].[contenthash:8].chunk.css',
            }),
            // new webpack.HotModuleReplacementPlugin(),
            // new webpack.WatchIgnorePlugin({
            //   paths: [/\.js$/, /\.d\.ts$/],
            // }),
            // new RunScriptWebpackPlugin({ name: options.filename, cwd: options.outputPath }),
        ]),
        optimization: {
            minimize: production,
            minimizer: compact([
                new TerserPlugin({
                    minify: TerserPlugin.esbuildMinify,
                    // `terserOptions` options will be passed to `esbuild`
                    // Link to options - https://esbuild.github.io/api/#minify
                    // Note: the `minify` options is true by default (and override other `minify*` options), so if you want to disable the `minifyIdentifiers` option (or other `minify*` options) please use:
                    terserOptions: {
                        logLevel: "error",
                        minify: true,
                    },
                }),
                (!ssr) ? new CssMinimizerPlugin({
                    minimizerOptions: {
                        preset: [
                            'default'
                        ],
                    },
                }) : undefined,
            ])
        },
        module: {
            rules: [
                {
                    test: /\.m?js/,
                    resolve: {
                        fullySpecified: false,
                    },
                },
                ...createStyleLoaders(MiniCssExtractPlugin.loader, {
                    emit: !ssr
                }),
                {
                    test: /\.mdx?$/,
                    use: [
                        {
                            loader: require.resolve('babel-loader'),
                            options: {
                                sourceType: 'unambiguous',
                                babelrc: false,
                                configFile: false,
                                presets: [
                                    require.resolve('@babel/preset-react'),
                                    require.resolve('@babel/preset-env'),
                                ],
                            },
                        },
                        {
                            loader: require.resolve('@teambit/mdx.modules.mdx-loader'),
                        },
                    ],
                },
                {
                    test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
                    type: 'asset',
                    parser: {
                        dataUrlCondition: {
                            maxSize: imageInlineSizeLimit,
                        },
                    },
                    generator: {
                        filename: 'static/images/[hash][ext][query]',
                        emit: !ssr
                    },
                },
                {
                    // loads svg as both inlineUrl and react component, like:
                    // import starUrl, { ReactComponent as StarIcon } from './star.svg';
                    // (remove when there is native support for both opitons from webpack5 / svgr)
                    test: /\.svg$/,
                    oneOf: [
                        {
                            dependency: { not: ['url'] }, // exclude new URL calls
                            use: [
                                {
                                    loader: require.resolve('@svgr/webpack'),
                                    options: { titleProp: true, ref: true },
                                },
                                require.resolve('new-url-loader'),
                            ],
                        },
                        {
                            type: 'asset', // export a data URI or emit a separate file
                        },
                    ],
                },
                {
                    test: /\.(woff(2)?|ttf|eot|svg)(\?v=\d+\.\d+\.\d+)?$/,
                    type: 'asset',
                    generator: {
                        filename: 'static/fonts/[hash][ext][query]',
                        emit: !ssr
                    },
                },
            ]
        }
    };
};
export {};
//# sourceMappingURL=webpack.build.config.js.map