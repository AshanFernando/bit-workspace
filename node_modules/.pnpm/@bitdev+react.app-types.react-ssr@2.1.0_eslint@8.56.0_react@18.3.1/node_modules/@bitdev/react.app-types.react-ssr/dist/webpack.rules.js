// const webpack = require('webpack');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const { createStyleLoaders } = require('./create-style-loaders');
// adding deps for Bit.
require('style-loader');
require('css-loader');
require('postcss-loader');
require('resolve-url-loader');
require('new-url-loader');
require('sass-loader');
require('less-loader');
require('babel-loader');
require('@babel/preset-react');
require('@babel/preset-env');
require('@teambit/mdx.modules.mdx-loader');
require('@svgr/webpack');
const imageInlineSizeLimit = parseInt(process.env.IMAGE_INLINE_SIZE_LIMIT || '10000', 10);
module.exports = [
    {
        test: /\.js$/,
        enforce: 'pre',
        // limit loader to files in the current project,
        // to skip any files linked from other projects (like Bit itself)
        include: /node_modules/,
        // only apply to packages with componentId in their package.json (ie. bit components)
        descriptionData: { componentId: (value) => !!value },
        use: [require.resolve('source-map-loader')],
    },
    {
        // "oneOf" will traverse all following loaders until one will
        // match the requirements. When no loader matches it will fall
        // back to the "file" loader at the end of the loader list.
        oneOf: [
            {
                test: /\.js$/,
                // limit loader to files in the current project,
                // to skip any files linked from other projects (like Bit itself)
                include: /node_modules/,
                // only apply to packages with componentId in their package.json (ie. bit components)
                descriptionData: { _bit_local: value => !!value, type: "module", componentId: (value) => !!value },
                use: [
                    require.resolve('@pmmmwh/react-refresh-webpack-plugin/loader'),
                    {
                        loader: require.resolve('babel-loader'),
                        options: {
                            babelrc: false,
                            configFile: false,
                            plugins: [
                                require.resolve('react-refresh/babel'),
                                // for component highlighting in preview.
                                // [require.resolve('@teambit/react.babel.bit-react-transformer')],
                            ],
                            // turn off all optimizations (only slow down for node_modules)
                            compact: false,
                            minified: false,
                        },
                    },
                ],
            },
            {
                test: /\.m?js$/,
                resolve: {
                    fullySpecified: false,
                },
            },
            ...createStyleLoaders(MiniCssExtractPlugin.loader),
            // ...createStyleLoaders(MiniCssExtractPlugin.loader),
            // Process application JS with Babel.
            // The preset includes JSX, Flow, TypeScript, and some ESnext features.
            // {
            //   test: /\.(js|mjs|jsx|ts|tsx)$/,
            //   exclude: [/node_modules/, /\/dist\//],
            //   // consider: limit loader to files only in a capsule that has bitid in package.json
            //   // descriptionData: { componentId: ComponentID.isValidObject },
            //   // // or
            //   // include: capsulePaths
            //   loader: require.resolve('babel-loader'),
            //   options: {
            //     sourceType: 'unambiguous',
            //     babelrc: false,
            //     configFile: false,
            //     customize: require.resolve(
            //       'babel-preset-react-ssr/webpack-overrides'
            //     ),
            //     presets: [
            //       [
            //         require.resolve('@babel/preset-react'),
            //         {
            //           runtime: 'automatic',
            //         },
            //       ],
            //     ],
            //     // This is a feature of `babel-loader` for webpack (not Babel itself).
            //     // It enables caching results in ./node_modules/.cache/babel-loader/
            //     // directory for faster rebuilds.
            //     cacheDirectory: true,
            //     // See #6846 for context on why cacheCompression is disabled
            //     cacheCompression: false,
            //     compact: false,
            //   },
            // },
            // Process any JS outside of the app with Babel.
            // Unlike the application JS, we only compile the standard ES features.
            // Probably not needed in our use case
            // {
            //   test: /\.(js|mjs)$/,
            //   exclude: /@babel(?:\/|\\{1,2})runtime/,
            //   loader: require.resolve('babel-loader'),
            //   options: {
            //     babelrc: false,
            //     configFile: false,
            //     compact: false,
            //     presets: [[require.resolve('babel-preset-react-ssr/dependencies'), { helpers: true }]],
            //     cacheDirectory: true,
            //     // See #6846 for context on why cacheCompression is disabled
            //     cacheCompression: false,
            //     // Babel sourcemaps are needed for debugging into node_modules
            //     // code.  Without the options below, debuggers like VSCode
            //     // show incorrect code and set breakpoints on the wrong lines.
            //     sourceMaps: shouldUseSourceMap,
            //     inputSourceMap: shouldUseSourceMap,
            //   },
            // },
            // MDX support (move to the mdx aspect and extend from there)
            {
                test: /\.mdx?$/,
                // exclude: [/node_modules/],
                use: [
                    {
                        loader: require.resolve('babel-loader'),
                        options: {
                            sourceType: 'unambiguous',
                            babelrc: false,
                            configFile: false,
                            presets: [
                                require.resolve('@babel/preset-react'),
                                require.resolve('@babel/preset-env'),
                            ],
                        },
                    },
                    {
                        loader: require.resolve('@teambit/mdx.modules.mdx-loader'),
                    },
                ],
            },
            {
                test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
                type: 'asset',
                parser: {
                    dataUrlCondition: {
                        maxSize: imageInlineSizeLimit,
                    },
                },
                generator: {
                    filename: 'static/images/[hash][ext][query]',
                },
            },
            {
                // loads svg as both inlineUrl and react component, like:
                // import starUrl, { ReactComponent as StarIcon } from './star.svg';
                // (remove when there is native support for both opitons from webpack5 / svgr)
                test: /\.svg$/,
                oneOf: [
                    {
                        dependency: { not: ['url'] }, // exclude new URL calls
                        use: [
                            {
                                loader: require.resolve('@svgr/webpack'),
                                options: { titleProp: true, ref: true },
                            },
                            require.resolve('new-url-loader'),
                        ],
                    },
                    {
                        type: 'asset', // export a data URI or emit a separate file
                    },
                ],
            },
            {
                test: /\.(woff(2)?|ttf|eot|svg)(\?v=\d+\.\d+\.\d+)?$/,
                type: 'asset',
                generator: {
                    filename: 'static/fonts/[hash][ext][query]',
                },
            },
            // "file" loader makes sure those assets get served by WebpackDevServer.
            // When you `import` an asset, you get its (virtual) filename.
            // In production, they would get copied to the `build` folder.
            // This loader doesn't use a "test" so it will catch all modules
            // that fall through the other loaders.
            {
                // Exclude `js` files to keep "css" loader working as it injects
                // its runtime that would otherwise be processed through "file" loader.
                // Also exclude `html` and `json` extensions so they get processed
                // by webpacks internal loaders.
                exclude: [
                    /\.(js|mjs|cjs|jsx|ts|tsx)$/,
                    /\.html$/,
                    /\.mdx?/,
                    /\.json$/,
                    /\.css$/,
                ],
                generator: {
                    filename: 'static/[hash][ext][query]',
                },
                type: 'asset',
            },
            // ** STOP ** Are you adding a new loader?
            // Make sure to add the new loader(s) before the "type:asset" loader.
        ],
    },
];
export {};
//# sourceMappingURL=webpack.rules.js.map