import express, { Application } from "express";
import { readFileSync } from "node:fs";
import { join } from "node:path";
import { installGlobals } from "@remix-run/node";
import { createRequire } from "node:module";

const require = createRequire(import.meta.url);

// Web Fetch API polyfill for React Router DOM Support
installGlobals();

export async function createServer(): Promise<Application> {
	const app = express();
	const rootPath = process.cwd();
	const publicPath = join(rootPath, "public");

	app.use(
		express.static(publicPath, {
			index: false,
			cacheControl: true,
			setHeaders: (res, path) => {
				if (path.endsWith(".html")) {
					res.setHeader("Cache-Control", "no-cache");
				} else {
					res.setHeader("Cache-Control", "public, max-age=31536000");
				}
			},
		}),
	);
	const serverComponent = require(join(rootPath, "./ssr.cjs"));

	app.use("*", async (req, res) => {
		const render = serverComponent?.render || serverComponent.default;
		const appHtml = await render({ path: req.url, req, res });
		const loadScripts = serverComponent?.loadScripts;
		const body = typeof appHtml === "string" ? appHtml : appHtml?.html;
		const indexHtml = readFileSync(join(rootPath, "index.html")).toString(
			"utf-8",
		);
		const scripts = loadScripts ? await loadScripts() : undefined;
		const htmlWithBody = indexHtml.replace(`<!--ssr-outlet-->`, body);
		const html = scripts
			? htmlWithBody.replace("<!--ssr-head-outlet-->", scripts)
			: htmlWithBody.replace("<!--ssr-head-outlet-->", appHtml?.script || "");

		res.statusCode = 200;
		res.setHeader("Content-Type", "text/html");
		res.send(html);
	});

	return app;
}

export async function run() {
	createServer().then((server) => {
		const args = process.argv.slice(2) || [];
		const [targetPort] = args;
		const port = process.env.PORT || targetPort || 8080;
		server.listen(port, () => {
			// eslint-disable-next-line no-console
			console.log(`server is listening to port ${port}`);
		});
	});
}
