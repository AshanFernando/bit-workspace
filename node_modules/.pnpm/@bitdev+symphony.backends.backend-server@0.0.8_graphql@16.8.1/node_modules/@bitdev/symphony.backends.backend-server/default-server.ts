import type { BackendServer, BackendContext } from './backend-server.js';
import { ApolloServerPluginDrainHttpServer } from '@apollo/server/plugin/drainHttpServer';
import cors from 'cors';
import http from 'node:http';
import express from 'express';
import { buildSubgraphSchema } from '@apollo/subgraph';
import { expressMiddleware } from '@apollo/server/express4';
import { ApolloServer } from '@apollo/server';
import { DefaultRESTRoute } from './rest-route.js';

export type DefaultServerOptions = {
  /**
   * name of the backend server.
   */
  name: string;

  /**
   * routes to load.
   */
  routes?: DefaultRESTRoute,

  /**
   * enables cors.
   */
  cors?: boolean;
};

export class DefaultServer implements BackendServer {
  // name = 'symphony-server';

  async run(context: BackendContext) {
    const name = context.name;
    const port = context.port || 3000;
    const app = express();
    const httpServer = http.createServer(app);
  
    // The ApolloServer constructor requires two parameters: your schema
    // definition and your set of resolvers.
    const server = new ApolloServer({
      schema: buildSubgraphSchema({ 
        typeDefs: context.gql?.typeDefs,
        resolvers: context.gql?.resolvers
       }),
       plugins: [ApolloServerPluginDrainHttpServer({ httpServer })],
    });

    await server.start();

    app.use(cors<cors.CorsRequest>({
      origin(origin, callback) {
        callback(null, true);
      },
      credentials: true,
    }));

    app.use(
      '/graphql',
      express.json(),
      // expressMiddleware accepts the same arguments:
      // an Apollo Server instance and optional configuration options
      expressMiddleware(server, {
        context: async ({ req }) => req,
      }),
    );
    
    context.routes?.forEach((route) => {
      const method = route.method || 'get';
      app[method](route.path, route.route);
    });

    await new Promise<void>((resolve) => httpServer.listen({ port }, resolve));

    return {
      appName: name,
      port,
      url: `http://localhost:${port}`,
      stop: async () => {
        httpServer.closeAllConnections();
        httpServer.close();
      }
    }
  }
}
