import { ApplicationInstance } from '@teambit/application';
import { DefaultRESTRoute } from './rest-route.js';
import { GqlSchema } from './gql-schema.js';
/**
 * backend server interface.
 */
export interface BackendServer {
    /**
     * name of the server.
     */
    name?: string;
    /**
     * url of the backend server.
     */
    run?: (context: BackendContext) => Promise<ApplicationInstance>;
    /**
     * determine whether to expose the service
     * in the gateway.
     */
    internal?: boolean;
    /**
     * deployment options.
     */
    deploy?: DeployOptions;
}
/**
 * context of the backend.
 */
export type BackendContext = {
    /**
     * name of the backend server.
     */
    name: string;
    /**
     * port.
     */
    port?: number;
    /**
     * list of routes to include.
     */
    routes?: DefaultRESTRoute[];
    /**
     * list of gql schemas to include.
     */
    gql?: GqlSchema;
};
/**
 * deploy options.
 */
export type DeployOptions = {
    /**
     * env variables.
     */
    envVariables: Record<string, string>;
    /**
     * scale options.
     * default to auto with min and max.
     */
    scale?: ScaleOptions;
    /**
     * custom domain for the service.
     * detach from gateway and expose on a self domain.
     */
    domain?: string;
    /**
     * list of volumes.
     */
    volumes: Volume[];
};
export type ScaleOptions = {
    /**
     * min replicas.
     * defaults to 3.
     */
    minReplicas?: number;
    /**
     * max replicas.
     * defaults to 12.
     */
    maxReplicas?: number;
};
export type Volume = {
    /**
     * type of the volume.
     * 'nfs' or 'self'
     */
    type: 'nfs' | 'self';
    /**
     * path to mount the volume.
     */
    mountPath: string;
    /**
     * size of the disk.
     * `10Gi`|`500Mi`
     */
    size?: string;
};
