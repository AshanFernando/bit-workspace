import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
// eslint-disable-next-line import/extensions
import { renderToStringWithData } from '@apollo/client/react/ssr/index.js';
// eslint-disable-next-line import/extensions
import { ApolloClient, ApolloProvider, InMemoryCache, createHttpLink, } from '@apollo/client/index.js';
import ReactDOMServer from 'react-dom/server';
import { createStaticRouter, createStaticHandler, StaticRouterProvider, } from 'react-router-dom/server.js';
import { routes } from './acme-web.js';
function createFetchRequest(req, res) {
    const origin = `${req.protocol}://${req.get('host')}`;
    // Note: This had to take originalUrl into account for presumably vite's proxying
    const url = new URL(req.originalUrl || req.url, origin);
    const controller = new AbortController();
    res.on('close', () => controller.abort());
    const headers = new Headers();
    for (const [key, values] of Object.entries(req.headers)) {
        if (values) {
            if (Array.isArray(values)) {
                for (const value of values) {
                    headers.append(key, value);
                }
            }
            else {
                headers.set(key, values);
            }
        }
    }
    const init = {
        method: req.method,
        headers,
        signal: controller.signal,
    };
    if (req.method !== 'GET' && req.method !== 'HEAD') {
        init.body = req.body;
    }
    return new Request(url.href, init);
}
const handler = createStaticHandler(routes);
export const render = async ({ cookie, req, res }) => {
    const fetchRequest = createFetchRequest(req, res);
    const context = (await handler.query(fetchRequest));
    const router = createStaticRouter(handler.dataRoutes, context);
    const gatewayUri = process.env.BACKEND_URL ?? 'http://localhost:5000';
    const client = new ApolloClient({
        cache: new InMemoryCache(),
        ssrMode: true,
        link: createHttpLink({
            uri: `${gatewayUri}/graphql`,
            credentials: 'same-origin',
            headers: {
                cookie,
            },
        }),
    });
    const App = () => {
        return (_jsx(ApolloProvider, { client: client, children: _jsx(StaticRouterProvider, { router: router, context: context }) }));
    };
    const content = await renderToStringWithData(_jsx(App, {}));
    const initialState = client.extract();
    const stateString = `window.__APOLLO_STATE__=${JSON.stringify(initialState).replace(/</g, '\u003c')};`;
    return {
        script: `<script>${stateString}</script>`,
        html: ReactDOMServer.renderToString(
        // eslint-disable-next-line react/no-danger
        _jsx("div", { id: "root", dangerouslySetInnerHTML: { __html: content } })),
    };
};
//# sourceMappingURL=server.app-root.js.map